<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="261.00"> </text><svg id="frames" x="10" width="1180" total_samples="6450"><g><title>[&lt;alloc::collections::btree::map::Range&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next] (4 samples, 0.06%)</title><rect x="0.0000%" y="197" width="0.0620%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="207.50"></text></g><g><title>[alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::range] (4 samples, 0.06%)</title><rect x="0.0620%" y="197" width="0.0620%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="4"/><text x="0.3120%" y="207.50"></text></g><g><title>[alloc::collections::btree::navigate::LeafRange&lt;BorrowType,K,V&gt;::perform_next_back_checked] (1 samples, 0.02%)</title><rect x="0.2171%" y="165" width="0.0155%" height="15" fill="rgb(221,193,54)" fg:x="14" fg:w="1"/><text x="0.4671%" y="175.50"></text></g><g><title>[alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::range] (1 samples, 0.02%)</title><rect x="0.2481%" y="149" width="0.0155%" height="15" fill="rgb(248,212,6)" fg:x="16" fg:w="1"/><text x="0.4981%" y="159.50"></text></g><g><title>[alloc::collections::btree::navigate::LeafRange&lt;BorrowType,K,V&gt;::perform_next_back_checked] (2 samples, 0.03%)</title><rect x="0.2636%" y="149" width="0.0310%" height="15" fill="rgb(208,68,35)" fg:x="17" fg:w="2"/><text x="0.5136%" y="159.50"></text></g><g><title>[kernel::context::memory::AddrSpaceWrapper::acquire_write] (2 samples, 0.03%)</title><rect x="0.2946%" y="149" width="0.0310%" height="15" fill="rgb(232,128,0)" fg:x="19" fg:w="2"/><text x="0.5446%" y="159.50"></text></g><g><title>[kernel::context::memory::Flusher::flush] (23 samples, 0.36%)</title><rect x="0.3256%" y="149" width="0.3566%" height="15" fill="rgb(207,160,47)" fg:x="21" fg:w="23"/><text x="0.5756%" y="159.50"></text></g><g><title>[memcpy] (9 samples, 0.14%)</title><rect x="0.5426%" y="133" width="0.1395%" height="15" fill="rgb(228,23,34)" fg:x="35" fg:w="9"/><text x="0.7926%" y="143.50"></text></g><g><title>[kernel::context::memory::Flusher::flush] (5 samples, 0.08%)</title><rect x="0.7132%" y="133" width="0.0775%" height="15" fill="rgb(218,30,26)" fg:x="46" fg:w="5"/><text x="0.9632%" y="143.50"></text></g><g><title>[kernel::context::memory::correct_inner] (434 samples, 6.73%)</title><rect x="0.7907%" y="133" width="6.7287%" height="15" fill="rgb(220,122,19)" fg:x="51" fg:w="434"/><text x="1.0407%" y="143.50">[kernel::..</text></g><g><title>[kernel::memory::init_frame] (434 samples, 6.73%)</title><rect x="0.7907%" y="117" width="6.7287%" height="15" fill="rgb(250,228,42)" fg:x="51" fg:w="434"/><text x="1.0407%" y="127.50">[kernel::..</text></g><g><title>[&lt;rmm::allocator::frame::buddy::BuddyAllocator&lt;A&gt; as rmm::allocator::frame::FrameAllocator&gt;::allocate] (434 samples, 6.73%)</title><rect x="0.7907%" y="101" width="6.7287%" height="15" fill="rgb(240,193,28)" fg:x="51" fg:w="434"/><text x="1.0407%" y="111.50">[&lt;rmm::al..</text></g><g><title>[memset] (7 samples, 0.11%)</title><rect x="7.4109%" y="85" width="0.1085%" height="15" fill="rgb(216,20,37)" fg:x="478" fg:w="7"/><text x="7.6609%" y="95.50"></text></g><g><title>[kernel::context::memory::cow] (30 samples, 0.47%)</title><rect x="7.5194%" y="133" width="0.4651%" height="15" fill="rgb(206,188,39)" fg:x="485" fg:w="30"/><text x="7.7694%" y="143.50"></text></g><g><title>[kernel::memory::init_frame] (30 samples, 0.47%)</title><rect x="7.5194%" y="117" width="0.4651%" height="15" fill="rgb(217,207,13)" fg:x="485" fg:w="30"/><text x="7.7694%" y="127.50"></text></g><g><title>[&lt;rmm::allocator::frame::buddy::BuddyAllocator&lt;A&gt; as rmm::allocator::frame::FrameAllocator&gt;::allocate] (30 samples, 0.47%)</title><rect x="7.5194%" y="101" width="0.4651%" height="15" fill="rgb(231,73,38)" fg:x="485" fg:w="30"/><text x="7.7694%" y="111.50"></text></g><g><title>[kernel::memory::init_frame] (9 samples, 0.14%)</title><rect x="7.9845%" y="133" width="0.1395%" height="15" fill="rgb(225,20,46)" fg:x="515" fg:w="9"/><text x="8.2345%" y="143.50"></text></g><g><title>[&lt;rmm::allocator::frame::buddy::BuddyAllocator&lt;A&gt; as rmm::allocator::frame::FrameAllocator&gt;::allocate] (9 samples, 0.14%)</title><rect x="7.9845%" y="117" width="0.1395%" height="15" fill="rgb(210,31,41)" fg:x="515" fg:w="9"/><text x="8.2345%" y="127.50"></text></g><g><title>[kernel::context::memory::correct_inner] (481 samples, 7.46%)</title><rect x="0.6822%" y="149" width="7.4574%" height="15" fill="rgb(221,200,47)" fg:x="44" fg:w="481"/><text x="0.9322%" y="159.50">[kernel::c..</text></g><g><title>[memcpy] (1 samples, 0.02%)</title><rect x="8.1240%" y="133" width="0.0155%" height="15" fill="rgb(226,26,5)" fg:x="524" fg:w="1"/><text x="8.3740%" y="143.50"></text></g><g><title>[kernel::context::memory::cow] (46 samples, 0.71%)</title><rect x="8.1395%" y="149" width="0.7132%" height="15" fill="rgb(249,33,26)" fg:x="525" fg:w="46"/><text x="8.3895%" y="159.50"></text></g><g><title>[kernel::memory::init_frame] (46 samples, 0.71%)</title><rect x="8.1395%" y="133" width="0.7132%" height="15" fill="rgb(235,183,28)" fg:x="525" fg:w="46"/><text x="8.3895%" y="143.50"></text></g><g><title>[&lt;rmm::allocator::frame::buddy::BuddyAllocator&lt;A&gt; as rmm::allocator::frame::FrameAllocator&gt;::allocate] (43 samples, 0.67%)</title><rect x="8.1860%" y="117" width="0.6667%" height="15" fill="rgb(221,5,38)" fg:x="528" fg:w="43"/><text x="8.4360%" y="127.50"></text></g><g><title>[memset] (1 samples, 0.02%)</title><rect x="8.8372%" y="101" width="0.0155%" height="15" fill="rgb(247,18,42)" fg:x="570" fg:w="1"/><text x="9.0872%" y="111.50"></text></g><g><title>[kernel::memory::init_frame] (1,691 samples, 26.22%)</title><rect x="8.8527%" y="149" width="26.2171%" height="15" fill="rgb(241,131,45)" fg:x="571" fg:w="1691"/><text x="9.1027%" y="159.50">[kernel::memory::init_frame]</text></g><g><title>[&lt;rmm::allocator::frame::buddy::BuddyAllocator&lt;A&gt; as rmm::allocator::frame::FrameAllocator&gt;::allocate] (1,675 samples, 25.97%)</title><rect x="9.1008%" y="133" width="25.9690%" height="15" fill="rgb(249,31,29)" fg:x="587" fg:w="1675"/><text x="9.3508%" y="143.50">[&lt;rmm::allocator::frame::buddy::BuddyAlloc..</text></g><g><title>[memset] (20 samples, 0.31%)</title><rect x="34.7597%" y="117" width="0.3101%" height="15" fill="rgb(225,111,53)" fg:x="2242" fg:w="20"/><text x="35.0097%" y="127.50"></text></g><g><title>[memcpy] (1 samples, 0.02%)</title><rect x="35.0698%" y="149" width="0.0155%" height="15" fill="rgb(238,160,17)" fg:x="2262" fg:w="1"/><text x="35.3198%" y="159.50"></text></g><g><title>[rmm::page::mapper::PageMapper&lt;A,F&gt;::map_phys] (7 samples, 0.11%)</title><rect x="35.0853%" y="149" width="0.1085%" height="15" fill="rgb(214,148,48)" fg:x="2263" fg:w="7"/><text x="35.3353%" y="159.50"></text></g><g><title>[&lt;rmm::allocator::frame::buddy::BuddyAllocator&lt;A&gt; as rmm::allocator::frame::FrameAllocator&gt;::allocate] (7 samples, 0.11%)</title><rect x="35.0853%" y="133" width="0.1085%" height="15" fill="rgb(232,36,49)" fg:x="2263" fg:w="7"/><text x="35.3353%" y="143.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::exception::page] (2,264 samples, 35.10%)</title><rect x="0.1240%" y="197" width="35.1008%" height="15" fill="rgb(209,103,24)" fg:x="8" fg:w="2264"/><text x="0.3740%" y="207.50">[kernel::arch::x86_64::interrupt::exception::page]</text></g><g><title>[kernel::arch::x86_64::interrupt::exception::page::inner] (2,259 samples, 35.02%)</title><rect x="0.2016%" y="181" width="35.0233%" height="15" fill="rgb(229,88,8)" fg:x="13" fg:w="2259"/><text x="0.4516%" y="191.50">[kernel::arch::x86_64::interrupt::exception::page::inner]</text></g><g><title>[kernel::context::memory::correct_inner] (2,257 samples, 34.99%)</title><rect x="0.2326%" y="165" width="34.9922%" height="15" fill="rgb(213,181,19)" fg:x="15" fg:w="2257"/><text x="0.4826%" y="175.50">[kernel::context::memory::correct_inner]</text></g><g><title>[rmm::page::mapper::PageMapper&lt;A,F&gt;::translate] (2 samples, 0.03%)</title><rect x="35.1938%" y="149" width="0.0310%" height="15" fill="rgb(254,191,54)" fg:x="2270" fg:w="2"/><text x="35.4438%" y="159.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::irq::keyboard::inner] (2 samples, 0.03%)</title><rect x="35.2248%" y="197" width="0.0310%" height="15" fill="rgb(241,83,37)" fg:x="2272" fg:w="2"/><text x="35.4748%" y="207.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::irq::keyboard] (1 samples, 0.02%)</title><rect x="35.2558%" y="197" width="0.0155%" height="15" fill="rgb(233,36,39)" fg:x="2274" fg:w="1"/><text x="35.5058%" y="207.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::irq::keyboard::inner] (1 samples, 0.02%)</title><rect x="35.2558%" y="181" width="0.0155%" height="15" fill="rgb(226,3,54)" fg:x="2274" fg:w="1"/><text x="35.5058%" y="191.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::irq::pci2::inner] (6 samples, 0.09%)</title><rect x="35.2713%" y="197" width="0.0930%" height="15" fill="rgb(245,192,40)" fg:x="2275" fg:w="6"/><text x="35.5213%" y="207.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::irq::pci2] (2 samples, 0.03%)</title><rect x="35.3643%" y="197" width="0.0310%" height="15" fill="rgb(238,167,29)" fg:x="2281" fg:w="2"/><text x="35.6143%" y="207.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::irq::pci2::inner] (2 samples, 0.03%)</title><rect x="35.3643%" y="181" width="0.0310%" height="15" fill="rgb(232,182,51)" fg:x="2281" fg:w="2"/><text x="35.6143%" y="191.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::irq::pit_stack::inner] (14 samples, 0.22%)</title><rect x="35.3953%" y="197" width="0.2171%" height="15" fill="rgb(231,60,39)" fg:x="2283" fg:w="14"/><text x="35.6453%" y="207.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter] (17 samples, 0.26%)</title><rect x="35.8450%" y="165" width="0.2636%" height="15" fill="rgb(208,69,12)" fg:x="2312" fg:w="17"/><text x="36.0950%" y="175.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::irq::pit_stack] (35 samples, 0.54%)</title><rect x="35.6124%" y="197" width="0.5426%" height="15" fill="rgb(235,93,37)" fg:x="2297" fg:w="35"/><text x="35.8624%" y="207.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::irq::pit_stack::inner] (29 samples, 0.45%)</title><rect x="35.7054%" y="181" width="0.4496%" height="15" fill="rgb(213,116,39)" fg:x="2303" fg:w="29"/><text x="35.9554%" y="191.50"></text></g><g><title>[kernel::context::switch::switch] (3 samples, 0.05%)</title><rect x="36.1085%" y="165" width="0.0465%" height="15" fill="rgb(222,207,29)" fg:x="2329" fg:w="3"/><text x="36.3585%" y="175.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter] (2 samples, 0.03%)</title><rect x="36.1240%" y="149" width="0.0310%" height="15" fill="rgb(206,96,30)" fg:x="2330" fg:w="2"/><text x="36.3740%" y="159.50"></text></g><g><title>[&lt;kernel::scheme::irq::IrqScheme as kernel::scheme::KernelScheme&gt;::kread] (1 samples, 0.02%)</title><rect x="36.1860%" y="165" width="0.0155%" height="15" fill="rgb(218,138,4)" fg:x="2334" fg:w="1"/><text x="36.4360%" y="175.50"></text></g><g><title>[&lt;kernel::scheme::debug::DebugScheme as kernel::scheme::KernelScheme&gt;::kwrite] (221 samples, 3.43%)</title><rect x="36.2791%" y="149" width="3.4264%" height="15" fill="rgb(250,191,14)" fg:x="2340" fg:w="221"/><text x="36.5291%" y="159.50">[&lt;k..</text></g><g><title>[kernel::devices::uart_16550::SerialPort&lt;T&gt;::write] (221 samples, 3.43%)</title><rect x="36.2791%" y="133" width="3.4264%" height="15" fill="rgb(239,60,40)" fg:x="2340" fg:w="221"/><text x="36.5291%" y="143.50">[ke..</text></g><g><title>[kernel::arch::x86_shared::time::counter] (62 samples, 0.96%)</title><rect x="40.6202%" y="117" width="0.9612%" height="15" fill="rgb(206,27,48)" fg:x="2620" fg:w="62"/><text x="40.8702%" y="127.50"></text></g><g><title>[&lt;kernel::scheme::event::EventScheme as kernel::scheme::KernelScheme&gt;::kread] (122 samples, 1.89%)</title><rect x="39.7054%" y="149" width="1.8915%" height="15" fill="rgb(225,35,8)" fg:x="2561" fg:w="122"/><text x="39.9554%" y="159.50">[..</text></g><g><title>[kernel::context::switch::switch] (119 samples, 1.84%)</title><rect x="39.7519%" y="133" width="1.8450%" height="15" fill="rgb(250,213,24)" fg:x="2564" fg:w="119"/><text x="40.0019%" y="143.50">[..</text></g><g><title>[kernel::context::switch::switch_finish_hook] (1 samples, 0.02%)</title><rect x="41.5814%" y="117" width="0.0155%" height="15" fill="rgb(247,123,22)" fg:x="2682" fg:w="1"/><text x="41.8314%" y="127.50"></text></g><g><title>[&lt;kernel::scheme::event::EventScheme as kernel::scheme::KernelScheme&gt;::kwrite] (1 samples, 0.02%)</title><rect x="41.5969%" y="149" width="0.0155%" height="15" fill="rgb(231,138,38)" fg:x="2683" fg:w="1"/><text x="41.8469%" y="159.50"></text></g><g><title>[&lt;kernel::scheme::user::UserScheme as kernel::scheme::KernelScheme&gt;::fevent] (1 samples, 0.02%)</title><rect x="41.5969%" y="133" width="0.0155%" height="15" fill="rgb(231,145,46)" fg:x="2683" fg:w="1"/><text x="41.8469%" y="143.50"></text></g><g><title>[kernel::scheme::user::UserInner::call] (1 samples, 0.02%)</title><rect x="41.5969%" y="117" width="0.0155%" height="15" fill="rgb(251,118,11)" fg:x="2683" fg:w="1"/><text x="41.8469%" y="127.50"></text></g><g><title>[kernel::scheme::user::UserInner::call_extended_inner] (1 samples, 0.02%)</title><rect x="41.5969%" y="101" width="0.0155%" height="15" fill="rgb(217,147,25)" fg:x="2683" fg:w="1"/><text x="41.8469%" y="111.50"></text></g><g><title>[kernel::context::switch::switch] (1 samples, 0.02%)</title><rect x="41.5969%" y="85" width="0.0155%" height="15" fill="rgb(247,81,37)" fg:x="2683" fg:w="1"/><text x="41.8469%" y="95.50"></text></g><g><title>[&lt;kernel::scheme::irq::IrqScheme as kernel::scheme::KernelScheme&gt;::kread] (1 samples, 0.02%)</title><rect x="41.6124%" y="149" width="0.0155%" height="15" fill="rgb(209,12,38)" fg:x="2684" fg:w="1"/><text x="41.8624%" y="159.50"></text></g><g><title>[&lt;kernel::scheme::irq::IrqScheme as kernel::scheme::KernelScheme&gt;::kwrite] (3 samples, 0.05%)</title><rect x="41.6279%" y="149" width="0.0465%" height="15" fill="rgb(227,1,9)" fg:x="2685" fg:w="3"/><text x="41.8779%" y="159.50"></text></g><g><title>[&lt;kernel::scheme::pipe::PipeScheme as kernel::scheme::KernelScheme&gt;::kread] (2 samples, 0.03%)</title><rect x="41.6744%" y="149" width="0.0310%" height="15" fill="rgb(248,47,43)" fg:x="2688" fg:w="2"/><text x="41.9244%" y="159.50"></text></g><g><title>[kernel::sync::wait_condition::WaitCondition::wait] (2 samples, 0.03%)</title><rect x="41.6744%" y="133" width="0.0310%" height="15" fill="rgb(221,10,30)" fg:x="2688" fg:w="2"/><text x="41.9244%" y="143.50"></text></g><g><title>[kernel::context::switch::switch] (2 samples, 0.03%)</title><rect x="41.6744%" y="117" width="0.0310%" height="15" fill="rgb(210,229,1)" fg:x="2688" fg:w="2"/><text x="41.9244%" y="127.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter] (1 samples, 0.02%)</title><rect x="41.6899%" y="101" width="0.0155%" height="15" fill="rgb(222,148,37)" fg:x="2689" fg:w="1"/><text x="41.9399%" y="111.50"></text></g><g><title>[&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal] (1 samples, 0.02%)</title><rect x="41.7054%" y="133" width="0.0155%" height="15" fill="rgb(234,67,33)" fg:x="2690" fg:w="1"/><text x="41.9554%" y="143.50"></text></g><g><title>[kernel::context::list::ContextList::insert_context_raw] (4 samples, 0.06%)</title><rect x="41.7209%" y="101" width="0.0620%" height="15" fill="rgb(247,98,35)" fg:x="2691" fg:w="4"/><text x="41.9709%" y="111.50"></text></g><g><title>[kernel::memory::init_frame] (4 samples, 0.06%)</title><rect x="41.7209%" y="85" width="0.0620%" height="15" fill="rgb(247,138,52)" fg:x="2691" fg:w="4"/><text x="41.9709%" y="95.50"></text></g><g><title>[&lt;rmm::allocator::frame::buddy::BuddyAllocator&lt;A&gt; as rmm::allocator::frame::FrameAllocator&gt;::allocate] (4 samples, 0.06%)</title><rect x="41.7209%" y="69" width="0.0620%" height="15" fill="rgb(213,79,30)" fg:x="2691" fg:w="4"/><text x="41.9709%" y="79.50"></text></g><g><title>[&lt;kernel::scheme::proc::ProcScheme&lt;_&gt; as kernel::scheme::KernelScheme&gt;::kopen] (6 samples, 0.09%)</title><rect x="41.7054%" y="149" width="0.0930%" height="15" fill="rgb(246,177,23)" fg:x="2690" fg:w="6"/><text x="41.9554%" y="159.50"></text></g><g><title>[kernel::scheme::proc::inherit_context] (5 samples, 0.08%)</title><rect x="41.7209%" y="133" width="0.0775%" height="15" fill="rgb(230,62,27)" fg:x="2691" fg:w="5"/><text x="41.9709%" y="143.50"></text></g><g><title>[kernel::context::list::ContextList::spawn] (5 samples, 0.08%)</title><rect x="41.7209%" y="117" width="0.0775%" height="15" fill="rgb(216,154,8)" fg:x="2691" fg:w="5"/><text x="41.9709%" y="127.50"></text></g><g><title>[kernel::context::memory::AddrSpaceWrapper::new] (1 samples, 0.02%)</title><rect x="41.7829%" y="101" width="0.0155%" height="15" fill="rgb(244,35,45)" fg:x="2695" fg:w="1"/><text x="42.0329%" y="111.50"></text></g><g><title>[&lt;rmm::allocator::frame::buddy::BuddyAllocator&lt;A&gt; as rmm::allocator::frame::FrameAllocator&gt;::allocate] (1 samples, 0.02%)</title><rect x="41.7829%" y="85" width="0.0155%" height="15" fill="rgb(251,115,12)" fg:x="2695" fg:w="1"/><text x="42.0329%" y="95.50"></text></g><g><title>[&lt;kernel::scheme::proc::ProcScheme&lt;_&gt; as kernel::scheme::KernelScheme&gt;::kwrite] (10 samples, 0.16%)</title><rect x="41.7984%" y="149" width="0.1550%" height="15" fill="rgb(240,54,50)" fg:x="2696" fg:w="10"/><text x="42.0484%" y="159.50"></text></g><g><title>[&lt;kernel::scheme::memory::MemoryScheme as kernel::scheme::KernelScheme&gt;::kfmap] (10 samples, 0.16%)</title><rect x="41.7984%" y="133" width="0.1550%" height="15" fill="rgb(233,84,52)" fg:x="2696" fg:w="10"/><text x="42.0484%" y="143.50"></text></g><g><title>[kernel::scheme::memory::MemoryScheme::fmap_anonymous] (10 samples, 0.16%)</title><rect x="41.7984%" y="117" width="0.1550%" height="15" fill="rgb(207,117,47)" fg:x="2696" fg:w="10"/><text x="42.0484%" y="127.50"></text></g><g><title>[kernel::context::memory::Grant::zeroed] (10 samples, 0.16%)</title><rect x="41.7984%" y="101" width="0.1550%" height="15" fill="rgb(249,43,39)" fg:x="2696" fg:w="10"/><text x="42.0484%" y="111.50"></text></g><g><title>[rmm::page::mapper::PageMapper&lt;A,F&gt;::map_phys] (10 samples, 0.16%)</title><rect x="41.7984%" y="85" width="0.1550%" height="15" fill="rgb(209,38,44)" fg:x="2696" fg:w="10"/><text x="42.0484%" y="95.50"></text></g><g><title>[&lt;rmm::allocator::frame::buddy::BuddyAllocator&lt;A&gt; as rmm::allocator::frame::FrameAllocator&gt;::allocate] (9 samples, 0.14%)</title><rect x="41.8140%" y="69" width="0.1395%" height="15" fill="rgb(236,212,23)" fg:x="2697" fg:w="9"/><text x="42.0640%" y="79.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter] (183 samples, 2.84%)</title><rect x="44.4651%" y="117" width="2.8372%" height="15" fill="rgb(242,79,21)" fg:x="2868" fg:w="183"/><text x="44.7151%" y="127.50">[k..</text></g><g><title>[&lt;kernel::scheme::root::RootScheme as kernel::scheme::KernelScheme&gt;::kread] (346 samples, 5.36%)</title><rect x="41.9535%" y="149" width="5.3643%" height="15" fill="rgb(211,96,35)" fg:x="2706" fg:w="346"/><text x="42.2035%" y="159.50">[&lt;kerne..</text></g><g><title>[kernel::context::switch::switch] (344 samples, 5.33%)</title><rect x="41.9845%" y="133" width="5.3333%" height="15" fill="rgb(253,215,40)" fg:x="2708" fg:w="344"/><text x="42.2345%" y="143.50">[kernel..</text></g><g><title>[kernel::context::switch::switch_finish_hook] (1 samples, 0.02%)</title><rect x="47.3023%" y="117" width="0.0155%" height="15" fill="rgb(211,81,21)" fg:x="3051" fg:w="1"/><text x="47.5523%" y="127.50"></text></g><g><title>[&lt;kernel::scheme::root::RootScheme as kernel::scheme::KernelScheme&gt;::kwrite] (37 samples, 0.57%)</title><rect x="47.3178%" y="149" width="0.5736%" height="15" fill="rgb(208,190,38)" fg:x="3052" fg:w="37"/><text x="47.5678%" y="159.50"></text></g><g><title>[kernel::scheme::user::UserInner::respond] (35 samples, 0.54%)</title><rect x="47.3488%" y="133" width="0.5426%" height="15" fill="rgb(235,213,38)" fg:x="3054" fg:w="35"/><text x="47.5988%" y="143.50"></text></g><g><title>[&lt;kernel::scheme::time::TimeScheme as kernel::scheme::KernelScheme&gt;::kread] (1 samples, 0.02%)</title><rect x="47.8915%" y="149" width="0.0155%" height="15" fill="rgb(237,122,38)" fg:x="3089" fg:w="1"/><text x="48.1415%" y="159.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter] (1 samples, 0.02%)</title><rect x="47.8915%" y="133" width="0.0155%" height="15" fill="rgb(244,218,35)" fg:x="3089" fg:w="1"/><text x="48.1415%" y="143.50"></text></g><g><title>[&lt;kernel::scheme::user::UserScheme as kernel::scheme::KernelScheme&gt;::kfpath] (1 samples, 0.02%)</title><rect x="47.9070%" y="149" width="0.0155%" height="15" fill="rgb(240,68,47)" fg:x="3090" fg:w="1"/><text x="48.1570%" y="159.50"></text></g><g><title>[kernel::scheme::user::UserInner::call] (1 samples, 0.02%)</title><rect x="47.9070%" y="133" width="0.0155%" height="15" fill="rgb(210,16,53)" fg:x="3090" fg:w="1"/><text x="48.1570%" y="143.50"></text></g><g><title>[kernel::scheme::user::UserInner::call_extended_inner] (1 samples, 0.02%)</title><rect x="47.9070%" y="117" width="0.0155%" height="15" fill="rgb(235,124,12)" fg:x="3090" fg:w="1"/><text x="48.1570%" y="127.50"></text></g><g><title>[kernel::context::switch::switch] (1 samples, 0.02%)</title><rect x="47.9070%" y="101" width="0.0155%" height="15" fill="rgb(224,169,11)" fg:x="3090" fg:w="1"/><text x="48.1570%" y="111.50"></text></g><g><title>[core::ptr::drop_in_place&lt;kernel::scheme::user::CaptureGuard&lt;_,_&gt;&gt;] (1 samples, 0.02%)</title><rect x="47.9225%" y="133" width="0.0155%" height="15" fill="rgb(250,166,2)" fg:x="3091" fg:w="1"/><text x="48.1725%" y="143.50"></text></g><g><title>[kernel::context::memory::AddrSpaceWrapper::munmap] (1 samples, 0.02%)</title><rect x="47.9225%" y="117" width="0.0155%" height="15" fill="rgb(242,216,29)" fg:x="3091" fg:w="1"/><text x="48.1725%" y="127.50"></text></g><g><title>[kernel::context::memory::AddrSpace::munmap_inner] (1 samples, 0.02%)</title><rect x="47.9225%" y="101" width="0.0155%" height="15" fill="rgb(230,116,27)" fg:x="3091" fg:w="1"/><text x="48.1725%" y="111.50"></text></g><g><title>[alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove] (1 samples, 0.02%)</title><rect x="47.9225%" y="85" width="0.0155%" height="15" fill="rgb(228,99,48)" fg:x="3091" fg:w="1"/><text x="48.1725%" y="95.50"></text></g><g><title>[kernel::context::switch::switch] (6 samples, 0.09%)</title><rect x="47.9380%" y="117" width="0.0930%" height="15" fill="rgb(253,11,6)" fg:x="3092" fg:w="6"/><text x="48.1880%" y="127.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter] (5 samples, 0.08%)</title><rect x="47.9535%" y="101" width="0.0775%" height="15" fill="rgb(247,143,39)" fg:x="3093" fg:w="5"/><text x="48.2035%" y="111.50"></text></g><g><title>[kernel::scheme::user::UserInner::call_extended_inner] (8 samples, 0.12%)</title><rect x="47.9380%" y="133" width="0.1240%" height="15" fill="rgb(236,97,10)" fg:x="3092" fg:w="8"/><text x="48.1880%" y="143.50"></text></g><g><title>[kernel::event::trigger] (2 samples, 0.03%)</title><rect x="48.0310%" y="117" width="0.0310%" height="15" fill="rgb(233,208,19)" fg:x="3098" fg:w="2"/><text x="48.2810%" y="127.50"></text></g><g><title>[kernel::sync::wait_condition::WaitCondition::notify] (2 samples, 0.03%)</title><rect x="48.0310%" y="101" width="0.0310%" height="15" fill="rgb(216,164,2)" fg:x="3098" fg:w="2"/><text x="48.2810%" y="111.50"></text></g><g><title>[&lt;kernel::scheme::user::UserScheme as kernel::scheme::KernelScheme&gt;::kopen] (10 samples, 0.16%)</title><rect x="47.9225%" y="149" width="0.1550%" height="15" fill="rgb(220,129,5)" fg:x="3091" fg:w="10"/><text x="48.1725%" y="159.50"></text></g><g><title>[kernel::scheme::user::UserInner::copy_and_capture_tail] (1 samples, 0.02%)</title><rect x="48.0620%" y="133" width="0.0155%" height="15" fill="rgb(242,17,10)" fg:x="3100" fg:w="1"/><text x="48.3120%" y="143.50"></text></g><g><title>[kernel::context::memory::Grant::allocated_shared_one_page] (1 samples, 0.02%)</title><rect x="48.0620%" y="117" width="0.0155%" height="15" fill="rgb(242,107,0)" fg:x="3100" fg:w="1"/><text x="48.3120%" y="127.50"></text></g><g><title>[rmm::page::mapper::PageMapper&lt;A,F&gt;::map_phys] (1 samples, 0.02%)</title><rect x="48.0620%" y="101" width="0.0155%" height="15" fill="rgb(251,28,31)" fg:x="3100" fg:w="1"/><text x="48.3120%" y="111.50"></text></g><g><title>[core::ptr::drop_in_place&lt;kernel::scheme::user::CaptureGuard&lt;_,_&gt;&gt;] (3 samples, 0.05%)</title><rect x="48.0775%" y="133" width="0.0465%" height="15" fill="rgb(233,223,10)" fg:x="3101" fg:w="3"/><text x="48.3275%" y="143.50"></text></g><g><title>[&lt;kernel::context::context::BorrowedHtBuf as core::ops::drop::Drop&gt;::drop] (3 samples, 0.05%)</title><rect x="48.0775%" y="117" width="0.0465%" height="15" fill="rgb(215,21,27)" fg:x="3101" fg:w="3"/><text x="48.3275%" y="127.50"></text></g><g><title>[kernel::context::current] (1 samples, 0.02%)</title><rect x="48.1085%" y="101" width="0.0155%" height="15" fill="rgb(232,23,21)" fg:x="3103" fg:w="1"/><text x="48.3585%" y="111.50"></text></g><g><title>[kernel::context::memory::correct_inner] (3 samples, 0.05%)</title><rect x="48.1240%" y="85" width="0.0465%" height="15" fill="rgb(244,5,23)" fg:x="3104" fg:w="3"/><text x="48.3740%" y="95.50"></text></g><g><title>[kernel::memory::init_frame] (3 samples, 0.05%)</title><rect x="48.1240%" y="69" width="0.0465%" height="15" fill="rgb(226,81,46)" fg:x="3104" fg:w="3"/><text x="48.3740%" y="79.50"></text></g><g><title>[&lt;rmm::allocator::frame::buddy::BuddyAllocator&lt;A&gt; as rmm::allocator::frame::FrameAllocator&gt;::allocate] (3 samples, 0.05%)</title><rect x="48.1240%" y="53" width="0.0465%" height="15" fill="rgb(247,70,30)" fg:x="3104" fg:w="3"/><text x="48.3740%" y="63.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::exception::page] (5 samples, 0.08%)</title><rect x="48.1240%" y="133" width="0.0775%" height="15" fill="rgb(212,68,19)" fg:x="3104" fg:w="5"/><text x="48.3740%" y="143.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::exception::page::inner] (5 samples, 0.08%)</title><rect x="48.1240%" y="117" width="0.0775%" height="15" fill="rgb(240,187,13)" fg:x="3104" fg:w="5"/><text x="48.3740%" y="127.50"></text></g><g><title>[kernel::context::memory::correct_inner] (5 samples, 0.08%)</title><rect x="48.1240%" y="101" width="0.0775%" height="15" fill="rgb(223,113,26)" fg:x="3104" fg:w="5"/><text x="48.3740%" y="111.50"></text></g><g><title>[kernel::context::memory::cow] (2 samples, 0.03%)</title><rect x="48.1705%" y="85" width="0.0310%" height="15" fill="rgb(206,192,2)" fg:x="3107" fg:w="2"/><text x="48.4205%" y="95.50"></text></g><g><title>[kernel::memory::init_frame] (2 samples, 0.03%)</title><rect x="48.1705%" y="69" width="0.0310%" height="15" fill="rgb(241,108,4)" fg:x="3107" fg:w="2"/><text x="48.4205%" y="79.50"></text></g><g><title>[&lt;rmm::allocator::frame::buddy::BuddyAllocator&lt;A&gt; as rmm::allocator::frame::FrameAllocator&gt;::allocate] (2 samples, 0.03%)</title><rect x="48.1705%" y="53" width="0.0310%" height="15" fill="rgb(247,173,49)" fg:x="3107" fg:w="2"/><text x="48.4205%" y="63.50"></text></g><g><title>[kernel::context::memory::Flusher::flush] (1 samples, 0.02%)</title><rect x="48.2016%" y="85" width="0.0155%" height="15" fill="rgb(224,114,35)" fg:x="3109" fg:w="1"/><text x="48.4516%" y="95.50"></text></g><g><title>[kernel::context::memory::AddrSpace::munmap_inner] (2 samples, 0.03%)</title><rect x="48.2016%" y="101" width="0.0310%" height="15" fill="rgb(245,159,27)" fg:x="3109" fg:w="2"/><text x="48.4516%" y="111.50"></text></g><g><title>[kernel::context::memory::UserGrants::remove] (1 samples, 0.02%)</title><rect x="48.2171%" y="85" width="0.0155%" height="15" fill="rgb(245,172,44)" fg:x="3110" fg:w="1"/><text x="48.4671%" y="95.50"></text></g><g><title>[alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove] (1 samples, 0.02%)</title><rect x="48.2171%" y="69" width="0.0155%" height="15" fill="rgb(236,23,11)" fg:x="3110" fg:w="1"/><text x="48.4671%" y="79.50"></text></g><g><title>[kernel::scheme::user::CaptureGuard&lt;_,_&gt;::release_inner] (4 samples, 0.06%)</title><rect x="48.2016%" y="133" width="0.0620%" height="15" fill="rgb(205,117,38)" fg:x="3109" fg:w="4"/><text x="48.4516%" y="143.50"></text></g><g><title>[kernel::context::memory::AddrSpaceWrapper::munmap] (4 samples, 0.06%)</title><rect x="48.2016%" y="117" width="0.0620%" height="15" fill="rgb(237,72,25)" fg:x="3109" fg:w="4"/><text x="48.4516%" y="127.50"></text></g><g><title>[kernel::context::memory::Flusher::flush] (2 samples, 0.03%)</title><rect x="48.2326%" y="101" width="0.0310%" height="15" fill="rgb(244,70,9)" fg:x="3111" fg:w="2"/><text x="48.4826%" y="111.50"></text></g><g><title>[kernel::context::switch::switch] (30 samples, 0.47%)</title><rect x="48.2791%" y="101" width="0.4651%" height="15" fill="rgb(217,125,39)" fg:x="3114" fg:w="30"/><text x="48.5291%" y="111.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter] (18 samples, 0.28%)</title><rect x="48.4651%" y="85" width="0.2791%" height="15" fill="rgb(235,36,10)" fg:x="3126" fg:w="18"/><text x="48.7151%" y="95.50"></text></g><g><title>[kernel::event::trigger] (1 samples, 0.02%)</title><rect x="48.7442%" y="101" width="0.0155%" height="15" fill="rgb(251,123,47)" fg:x="3144" fg:w="1"/><text x="48.9942%" y="111.50"></text></g><g><title>[kernel::sync::wait_condition::WaitCondition::notify] (1 samples, 0.02%)</title><rect x="48.7442%" y="85" width="0.0155%" height="15" fill="rgb(221,13,13)" fg:x="3144" fg:w="1"/><text x="48.9942%" y="95.50"></text></g><g><title>[kernel::scheme::user::UserInner::call] (35 samples, 0.54%)</title><rect x="48.2636%" y="133" width="0.5426%" height="15" fill="rgb(238,131,9)" fg:x="3113" fg:w="35"/><text x="48.5136%" y="143.50"></text></g><g><title>[kernel::scheme::user::UserInner::call_extended_inner] (34 samples, 0.53%)</title><rect x="48.2791%" y="117" width="0.5271%" height="15" fill="rgb(211,50,8)" fg:x="3114" fg:w="34"/><text x="48.5291%" y="127.50"></text></g><g><title>[kernel::sync::wait_condition::WaitCondition::notify] (3 samples, 0.05%)</title><rect x="48.7597%" y="101" width="0.0465%" height="15" fill="rgb(245,182,24)" fg:x="3145" fg:w="3"/><text x="49.0097%" y="111.50"></text></g><g><title>[kernel::context::memory::UserGrants::insert] (2 samples, 0.03%)</title><rect x="48.8062%" y="101" width="0.0310%" height="15" fill="rgb(242,14,37)" fg:x="3148" fg:w="2"/><text x="49.0562%" y="111.50"></text></g><g><title>[alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove] (1 samples, 0.02%)</title><rect x="48.8217%" y="85" width="0.0155%" height="15" fill="rgb(246,228,12)" fg:x="3149" fg:w="1"/><text x="49.0717%" y="95.50"></text></g><g><title>[alloc::collections::btree::remove::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv] (1 samples, 0.02%)</title><rect x="48.8217%" y="69" width="0.0155%" height="15" fill="rgb(213,55,15)" fg:x="3149" fg:w="1"/><text x="49.0717%" y="79.50"></text></g><g><title>[memmove] (1 samples, 0.02%)</title><rect x="48.8217%" y="53" width="0.0155%" height="15" fill="rgb(209,9,3)" fg:x="3149" fg:w="1"/><text x="49.0717%" y="63.50"></text></g><g><title>[&lt;kernel::scheme::user::UserScheme as kernel::scheme::KernelScheme&gt;::kread] (50 samples, 0.78%)</title><rect x="48.0775%" y="149" width="0.7752%" height="15" fill="rgb(230,59,30)" fg:x="3101" fg:w="50"/><text x="48.3275%" y="159.50"></text></g><g><title>[kernel::scheme::user::UserInner::capture_inner] (3 samples, 0.05%)</title><rect x="48.8062%" y="133" width="0.0465%" height="15" fill="rgb(209,121,21)" fg:x="3148" fg:w="3"/><text x="49.0562%" y="143.50"></text></g><g><title>[kernel::context::memory::AddrSpace::mmap] (3 samples, 0.05%)</title><rect x="48.8062%" y="117" width="0.0465%" height="15" fill="rgb(220,109,13)" fg:x="3148" fg:w="3"/><text x="49.0562%" y="127.50"></text></g><g><title>[rmm::page::mapper::PageMapper&lt;A,F&gt;::map_phys] (1 samples, 0.02%)</title><rect x="48.8372%" y="101" width="0.0155%" height="15" fill="rgb(232,18,1)" fg:x="3150" fg:w="1"/><text x="49.0872%" y="111.50"></text></g><g><title>[core::ptr::drop_in_place&lt;kernel::scheme::user::CaptureGuard&lt;_,_&gt;&gt;] (1 samples, 0.02%)</title><rect x="48.8527%" y="133" width="0.0155%" height="15" fill="rgb(215,41,42)" fg:x="3151" fg:w="1"/><text x="49.1027%" y="143.50"></text></g><g><title>[kernel::context::current] (1 samples, 0.02%)</title><rect x="48.8527%" y="117" width="0.0155%" height="15" fill="rgb(224,123,36)" fg:x="3151" fg:w="1"/><text x="49.1027%" y="127.50"></text></g><g><title>[kernel::arch::x86_64::arch_copy_to_user] (2 samples, 0.03%)</title><rect x="48.8682%" y="133" width="0.0310%" height="15" fill="rgb(240,125,3)" fg:x="3152" fg:w="2"/><text x="49.1182%" y="143.50"></text></g><g><title>[alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::range_mut] (2 samples, 0.03%)</title><rect x="48.9302%" y="69" width="0.0310%" height="15" fill="rgb(205,98,50)" fg:x="3156" fg:w="2"/><text x="49.1802%" y="79.50"></text></g><g><title>[kernel::context::memory::UserGrants::remove] (4 samples, 0.06%)</title><rect x="48.9302%" y="85" width="0.0620%" height="15" fill="rgb(205,185,37)" fg:x="3156" fg:w="4"/><text x="49.1802%" y="95.50"></text></g><g><title>[alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove] (2 samples, 0.03%)</title><rect x="48.9612%" y="69" width="0.0310%" height="15" fill="rgb(238,207,15)" fg:x="3158" fg:w="2"/><text x="49.2112%" y="79.50"></text></g><g><title>[alloc::collections::btree::remove::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv] (1 samples, 0.02%)</title><rect x="48.9767%" y="53" width="0.0155%" height="15" fill="rgb(213,199,42)" fg:x="3159" fg:w="1"/><text x="49.2267%" y="63.50"></text></g><g><title>[memmove] (1 samples, 0.02%)</title><rect x="48.9767%" y="37" width="0.0155%" height="15" fill="rgb(235,201,11)" fg:x="3159" fg:w="1"/><text x="49.2267%" y="47.50"></text></g><g><title>[kernel::context::memory::AddrSpace::munmap_inner] (9 samples, 0.14%)</title><rect x="48.8992%" y="101" width="0.1395%" height="15" fill="rgb(207,46,11)" fg:x="3154" fg:w="9"/><text x="49.1492%" y="111.50"></text></g><g><title>[rmm::page::mapper::unmap_phys_inner] (3 samples, 0.05%)</title><rect x="48.9922%" y="85" width="0.0465%" height="15" fill="rgb(241,35,35)" fg:x="3160" fg:w="3"/><text x="49.2422%" y="95.50"></text></g><g><title>[rmm::page::mapper::unmap_phys_inner] (3 samples, 0.05%)</title><rect x="48.9922%" y="69" width="0.0465%" height="15" fill="rgb(243,32,47)" fg:x="3160" fg:w="3"/><text x="49.2422%" y="79.50"></text></g><g><title>[rmm::page::mapper::unmap_phys_inner] (2 samples, 0.03%)</title><rect x="49.0078%" y="53" width="0.0310%" height="15" fill="rgb(247,202,23)" fg:x="3161" fg:w="2"/><text x="49.2578%" y="63.50"></text></g><g><title>[kernel::scheme::user::CaptureGuard&lt;_,_&gt;::release_inner] (61 samples, 0.95%)</title><rect x="48.8992%" y="133" width="0.9457%" height="15" fill="rgb(219,102,11)" fg:x="3154" fg:w="61"/><text x="49.1492%" y="143.50"></text></g><g><title>[kernel::context::memory::AddrSpaceWrapper::munmap] (61 samples, 0.95%)</title><rect x="48.8992%" y="117" width="0.9457%" height="15" fill="rgb(243,110,44)" fg:x="3154" fg:w="61"/><text x="49.1492%" y="127.50"></text></g><g><title>[kernel::context::memory::Flusher::flush] (52 samples, 0.81%)</title><rect x="49.0388%" y="101" width="0.8062%" height="15" fill="rgb(222,74,54)" fg:x="3163" fg:w="52"/><text x="49.2888%" y="111.50"></text></g><g><title>[kernel::memory::get_page_info] (1 samples, 0.02%)</title><rect x="49.8295%" y="85" width="0.0155%" height="15" fill="rgb(216,99,12)" fg:x="3214" fg:w="1"/><text x="50.0795%" y="95.50"></text></g><g><title>[kernel::context::current] (1 samples, 0.02%)</title><rect x="49.8915%" y="101" width="0.0155%" height="15" fill="rgb(226,22,26)" fg:x="3218" fg:w="1"/><text x="50.1415%" y="111.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter] (176 samples, 2.73%)</title><rect x="52.9767%" y="85" width="2.7287%" height="15" fill="rgb(217,163,10)" fg:x="3417" fg:w="176"/><text x="53.2267%" y="95.50">[k..</text></g><g><title>[compiler_builtins::int::specialized_div_rem::u128_div_rem] (1 samples, 0.02%)</title><rect x="55.6899%" y="69" width="0.0155%" height="15" fill="rgb(213,25,53)" fg:x="3592" fg:w="1"/><text x="55.9399%" y="79.50"></text></g><g><title>[kernel::context::switch::switch] (376 samples, 5.83%)</title><rect x="49.9070%" y="101" width="5.8295%" height="15" fill="rgb(252,105,26)" fg:x="3219" fg:w="376"/><text x="50.1570%" y="111.50">[kernel..</text></g><g><title>[kernel::context::switch::switch_finish_hook] (2 samples, 0.03%)</title><rect x="55.7054%" y="85" width="0.0310%" height="15" fill="rgb(220,39,43)" fg:x="3593" fg:w="2"/><text x="55.9554%" y="95.50"></text></g><g><title>[kernel::event::trigger] (3 samples, 0.05%)</title><rect x="55.7364%" y="101" width="0.0465%" height="15" fill="rgb(229,68,48)" fg:x="3595" fg:w="3"/><text x="55.9864%" y="111.50"></text></g><g><title>[kernel::sync::wait_condition::WaitCondition::notify] (3 samples, 0.05%)</title><rect x="55.7364%" y="85" width="0.0465%" height="15" fill="rgb(252,8,32)" fg:x="3595" fg:w="3"/><text x="55.9864%" y="95.50"></text></g><g><title>[kernel::scheme::user::UserInner::call] (400 samples, 6.20%)</title><rect x="49.8450%" y="133" width="6.2016%" height="15" fill="rgb(223,20,43)" fg:x="3215" fg:w="400"/><text x="50.0950%" y="143.50">[kernel:..</text></g><g><title>[kernel::scheme::user::UserInner::call_extended_inner] (399 samples, 6.19%)</title><rect x="49.8605%" y="117" width="6.1860%" height="15" fill="rgb(229,81,49)" fg:x="3216" fg:w="399"/><text x="50.1105%" y="127.50">[kernel:..</text></g><g><title>[kernel::sync::wait_condition::WaitCondition::notify] (17 samples, 0.26%)</title><rect x="55.7829%" y="101" width="0.2636%" height="15" fill="rgb(236,28,36)" fg:x="3598" fg:w="17"/><text x="56.0329%" y="111.50"></text></g><g><title>[kernel::context::memory::Flusher::flush] (5 samples, 0.08%)</title><rect x="56.0620%" y="101" width="0.0775%" height="15" fill="rgb(249,185,26)" fg:x="3616" fg:w="5"/><text x="56.3120%" y="111.50"></text></g><g><title>[kernel::context::memory::Grant::allocated_shared_one_page] (1 samples, 0.02%)</title><rect x="56.1395%" y="101" width="0.0155%" height="15" fill="rgb(249,174,33)" fg:x="3621" fg:w="1"/><text x="56.3895%" y="111.50"></text></g><g><title>[rmm::page::mapper::PageMapper&lt;A,F&gt;::map_phys] (1 samples, 0.02%)</title><rect x="56.1395%" y="85" width="0.0155%" height="15" fill="rgb(233,201,37)" fg:x="3621" fg:w="1"/><text x="56.3895%" y="95.50"></text></g><g><title>[alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::range] (1 samples, 0.02%)</title><rect x="56.1860%" y="85" width="0.0155%" height="15" fill="rgb(221,78,26)" fg:x="3624" fg:w="1"/><text x="56.4360%" y="95.50"></text></g><g><title>[kernel::context::memory::AddrSpace::mmap] (10 samples, 0.16%)</title><rect x="56.0620%" y="117" width="0.1550%" height="15" fill="rgb(250,127,30)" fg:x="3616" fg:w="10"/><text x="56.3120%" y="127.50"></text></g><g><title>[kernel::context::memory::UserGrants::insert] (4 samples, 0.06%)</title><rect x="56.1550%" y="101" width="0.0620%" height="15" fill="rgb(230,49,44)" fg:x="3622" fg:w="4"/><text x="56.4050%" y="111.50"></text></g><g><title>[memmove] (1 samples, 0.02%)</title><rect x="56.2016%" y="85" width="0.0155%" height="15" fill="rgb(229,67,23)" fg:x="3625" fg:w="1"/><text x="56.4516%" y="95.50"></text></g><g><title>[&lt;kernel::scheme::user::UserScheme as kernel::scheme::KernelScheme&gt;::kwrite] (478 samples, 7.41%)</title><rect x="48.8527%" y="149" width="7.4109%" height="15" fill="rgb(249,83,47)" fg:x="3151" fg:w="478"/><text x="49.1027%" y="159.50">[&lt;kernel::..</text></g><g><title>[kernel::scheme::user::UserInner::capture_inner] (14 samples, 0.22%)</title><rect x="56.0465%" y="133" width="0.2171%" height="15" fill="rgb(215,43,3)" fg:x="3615" fg:w="14"/><text x="56.2965%" y="143.50"></text></g><g><title>[memset] (3 samples, 0.05%)</title><rect x="56.2171%" y="117" width="0.0465%" height="15" fill="rgb(238,154,13)" fg:x="3626" fg:w="3"/><text x="56.4671%" y="127.50"></text></g><g><title>[kernel::arch::x86_64::arch_copy_to_user] (1 samples, 0.02%)</title><rect x="56.2636%" y="149" width="0.0155%" height="15" fill="rgb(219,56,2)" fg:x="3629" fg:w="1"/><text x="56.5136%" y="159.50"></text></g><g><title>[kernel::context::current] (2 samples, 0.03%)</title><rect x="56.2791%" y="149" width="0.0310%" height="15" fill="rgb(233,0,4)" fg:x="3630" fg:w="2"/><text x="56.5291%" y="159.50"></text></g><g><title>[kernel::context::switch::switch] (42 samples, 0.65%)</title><rect x="56.3101%" y="149" width="0.6512%" height="15" fill="rgb(235,30,7)" fg:x="3632" fg:w="42"/><text x="56.5601%" y="159.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter] (26 samples, 0.40%)</title><rect x="56.5581%" y="133" width="0.4031%" height="15" fill="rgb(250,79,13)" fg:x="3648" fg:w="26"/><text x="56.8081%" y="143.50"></text></g><g><title>[kernel::scheme::SchemeList::get] (1 samples, 0.02%)</title><rect x="56.9612%" y="149" width="0.0155%" height="15" fill="rgb(211,146,34)" fg:x="3674" fg:w="1"/><text x="57.2112%" y="159.50"></text></g><g><title>[&lt;kernel::scheme::proc::ProcScheme&lt;_&gt; as kernel::scheme::KernelScheme&gt;::close] (7 samples, 0.11%)</title><rect x="56.9767%" y="117" width="0.1085%" height="15" fill="rgb(228,22,38)" fg:x="3675" fg:w="7"/><text x="57.2267%" y="127.50"></text></g><g><title>[alloc::sync::Arc&lt;T,A&gt;::drop_slow] (7 samples, 0.11%)</title><rect x="56.9767%" y="101" width="0.1085%" height="15" fill="rgb(235,168,5)" fg:x="3675" fg:w="7"/><text x="57.2267%" y="111.50"></text></g><g><title>[&lt;kernel::context::memory::AddrSpace as core::ops::drop::Drop&gt;::drop] (6 samples, 0.09%)</title><rect x="56.9922%" y="85" width="0.0930%" height="15" fill="rgb(221,155,16)" fg:x="3676" fg:w="6"/><text x="57.2422%" y="95.50"></text></g><g><title>[rmm::page::mapper::unmap_phys_inner] (6 samples, 0.09%)</title><rect x="56.9922%" y="69" width="0.0930%" height="15" fill="rgb(215,215,53)" fg:x="3676" fg:w="6"/><text x="57.2422%" y="79.50"></text></g><g><title>[rmm::page::mapper::unmap_phys_inner] (4 samples, 0.06%)</title><rect x="57.0233%" y="53" width="0.0620%" height="15" fill="rgb(223,4,10)" fg:x="3678" fg:w="4"/><text x="57.2733%" y="63.50"></text></g><g><title>[rmm::page::mapper::unmap_phys_inner] (4 samples, 0.06%)</title><rect x="57.0233%" y="37" width="0.0620%" height="15" fill="rgb(234,103,6)" fg:x="3678" fg:w="4"/><text x="57.2733%" y="47.50"></text></g><g><title>[kernel::syscall::fs::close] (11 samples, 0.17%)</title><rect x="56.9767%" y="149" width="0.1705%" height="15" fill="rgb(227,97,0)" fg:x="3675" fg:w="11"/><text x="57.2267%" y="159.50"></text></g><g><title>[kernel::context::file::FileDescription::try_close] (11 samples, 0.17%)</title><rect x="56.9767%" y="133" width="0.1705%" height="15" fill="rgb(234,150,53)" fg:x="3675" fg:w="11"/><text x="57.2267%" y="143.50"></text></g><g><title>[&lt;kernel::scheme::user::UserScheme as kernel::scheme::KernelScheme&gt;::close] (4 samples, 0.06%)</title><rect x="57.0853%" y="117" width="0.0620%" height="15" fill="rgb(228,201,54)" fg:x="3682" fg:w="4"/><text x="57.3353%" y="127.50"></text></g><g><title>[kernel::scheme::user::UserInner::call] (4 samples, 0.06%)</title><rect x="57.0853%" y="101" width="0.0620%" height="15" fill="rgb(222,22,37)" fg:x="3682" fg:w="4"/><text x="57.3353%" y="111.50"></text></g><g><title>[kernel::scheme::user::UserInner::call_extended_inner] (4 samples, 0.06%)</title><rect x="57.0853%" y="85" width="0.0620%" height="15" fill="rgb(237,53,32)" fg:x="3682" fg:w="4"/><text x="57.3353%" y="95.50"></text></g><g><title>[kernel::context::switch::switch] (4 samples, 0.06%)</title><rect x="57.0853%" y="69" width="0.0620%" height="15" fill="rgb(233,25,53)" fg:x="3682" fg:w="4"/><text x="57.3353%" y="79.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter] (3 samples, 0.05%)</title><rect x="57.1008%" y="53" width="0.0465%" height="15" fill="rgb(210,40,34)" fg:x="3683" fg:w="3"/><text x="57.3508%" y="63.50"></text></g><g><title>[kernel::context::memory::AddrSpaceWrapper::new] (3 samples, 0.05%)</title><rect x="57.1473%" y="85" width="0.0465%" height="15" fill="rgb(241,220,44)" fg:x="3686" fg:w="3"/><text x="57.3973%" y="95.50"></text></g><g><title>[&lt;rmm::allocator::frame::buddy::BuddyAllocator&lt;A&gt; as rmm::allocator::frame::FrameAllocator&gt;::allocate] (3 samples, 0.05%)</title><rect x="57.1473%" y="69" width="0.0465%" height="15" fill="rgb(235,28,35)" fg:x="3686" fg:w="3"/><text x="57.3973%" y="79.50"></text></g><g><title>[kernel::context::memory::cow] (2 samples, 0.03%)</title><rect x="57.1938%" y="69" width="0.0310%" height="15" fill="rgb(210,56,17)" fg:x="3689" fg:w="2"/><text x="57.4438%" y="79.50"></text></g><g><title>[kernel::memory::init_frame] (2 samples, 0.03%)</title><rect x="57.1938%" y="53" width="0.0310%" height="15" fill="rgb(224,130,29)" fg:x="3689" fg:w="2"/><text x="57.4438%" y="63.50"></text></g><g><title>[&lt;rmm::allocator::frame::buddy::BuddyAllocator&lt;A&gt; as rmm::allocator::frame::FrameAllocator&gt;::allocate] (2 samples, 0.03%)</title><rect x="57.1938%" y="37" width="0.0310%" height="15" fill="rgb(235,212,8)" fg:x="3689" fg:w="2"/><text x="57.4438%" y="47.50"></text></g><g><title>[kernel::memory::init_frame] (59 samples, 0.91%)</title><rect x="57.2248%" y="69" width="0.9147%" height="15" fill="rgb(223,33,50)" fg:x="3691" fg:w="59"/><text x="57.4748%" y="79.50"></text></g><g><title>[&lt;rmm::allocator::frame::buddy::BuddyAllocator&lt;A&gt; as rmm::allocator::frame::FrameAllocator&gt;::allocate] (59 samples, 0.91%)</title><rect x="57.2248%" y="53" width="0.9147%" height="15" fill="rgb(219,149,13)" fg:x="3691" fg:w="59"/><text x="57.4748%" y="63.50"></text></g><g><title>[memset] (1 samples, 0.02%)</title><rect x="58.1240%" y="37" width="0.0155%" height="15" fill="rgb(250,156,29)" fg:x="3749" fg:w="1"/><text x="58.3740%" y="47.50"></text></g><g><title>[kernel::context::memory::Grant::copy_mappings] (71 samples, 1.10%)</title><rect x="57.1938%" y="85" width="1.1008%" height="15" fill="rgb(216,193,19)" fg:x="3689" fg:w="71"/><text x="57.4438%" y="95.50"></text></g><g><title>[rmm::page::mapper::PageMapper&lt;A,F&gt;::map_phys] (10 samples, 0.16%)</title><rect x="58.1395%" y="69" width="0.1550%" height="15" fill="rgb(216,135,14)" fg:x="3750" fg:w="10"/><text x="58.3895%" y="79.50"></text></g><g><title>[&lt;rmm::allocator::frame::buddy::BuddyAllocator&lt;A&gt; as rmm::allocator::frame::FrameAllocator&gt;::allocate] (10 samples, 0.16%)</title><rect x="58.1395%" y="53" width="0.1550%" height="15" fill="rgb(241,47,5)" fg:x="3750" fg:w="10"/><text x="58.3895%" y="63.50"></text></g><g><title>[kernel::memory::get_page_info] (2 samples, 0.03%)</title><rect x="58.2946%" y="85" width="0.0310%" height="15" fill="rgb(233,42,35)" fg:x="3760" fg:w="2"/><text x="58.5446%" y="95.50"></text></g><g><title>[kernel::syscall::fs::dup] (78 samples, 1.21%)</title><rect x="57.1473%" y="149" width="1.2093%" height="15" fill="rgb(231,13,6)" fg:x="3686" fg:w="78"/><text x="57.3973%" y="159.50"></text></g><g><title>[kernel::syscall::fs::duplicate_file] (78 samples, 1.21%)</title><rect x="57.1473%" y="133" width="1.2093%" height="15" fill="rgb(207,181,40)" fg:x="3686" fg:w="78"/><text x="57.3973%" y="143.50"></text></g><g><title>[&lt;kernel::scheme::proc::ProcScheme&lt;_&gt; as kernel::scheme::KernelScheme&gt;::kdup] (78 samples, 1.21%)</title><rect x="57.1473%" y="117" width="1.2093%" height="15" fill="rgb(254,173,49)" fg:x="3686" fg:w="78"/><text x="57.3973%" y="127.50"></text></g><g><title>[kernel::context::memory::AddrSpaceWrapper::try_clone] (78 samples, 1.21%)</title><rect x="57.1473%" y="101" width="1.2093%" height="15" fill="rgb(221,1,38)" fg:x="3686" fg:w="78"/><text x="57.3973%" y="111.50"></text></g><g><title>[rmm::page::mapper::PageMapper&lt;A,F&gt;::map_phys] (2 samples, 0.03%)</title><rect x="58.3256%" y="85" width="0.0310%" height="15" fill="rgb(206,124,46)" fg:x="3762" fg:w="2"/><text x="58.5756%" y="95.50"></text></g><g><title>[&lt;rmm::allocator::frame::buddy::BuddyAllocator&lt;A&gt; as rmm::allocator::frame::FrameAllocator&gt;::allocate] (2 samples, 0.03%)</title><rect x="58.3256%" y="69" width="0.0310%" height="15" fill="rgb(249,21,11)" fg:x="3762" fg:w="2"/><text x="58.5756%" y="79.50"></text></g><g><title>[kernel::syscall::fs::fcntl] (2 samples, 0.03%)</title><rect x="58.3566%" y="149" width="0.0310%" height="15" fill="rgb(222,201,40)" fg:x="3764" fg:w="2"/><text x="58.6066%" y="159.50"></text></g><g><title>[kernel::context::memory::AddrSpace::mmap_anywhere] (1 samples, 0.02%)</title><rect x="58.3876%" y="117" width="0.0155%" height="15" fill="rgb(235,61,29)" fg:x="3766" fg:w="1"/><text x="58.6376%" y="127.50"></text></g><g><title>[kernel::memory::get_page_info] (1 samples, 0.02%)</title><rect x="58.3876%" y="101" width="0.0155%" height="15" fill="rgb(219,207,3)" fg:x="3766" fg:w="1"/><text x="58.6376%" y="111.50"></text></g><g><title>[kernel::memory::get_page_info] (1 samples, 0.02%)</title><rect x="58.4031%" y="117" width="0.0155%" height="15" fill="rgb(222,56,46)" fg:x="3767" fg:w="1"/><text x="58.6531%" y="127.50"></text></g><g><title>[&lt;rmm::allocator::frame::buddy::BuddyAllocator&lt;A&gt; as rmm::allocator::frame::FrameAllocator&gt;::allocate] (14 samples, 0.22%)</title><rect x="58.4186%" y="101" width="0.2171%" height="15" fill="rgb(239,76,54)" fg:x="3768" fg:w="14"/><text x="58.6686%" y="111.50"></text></g><g><title>[memset] (10 samples, 0.16%)</title><rect x="58.4806%" y="85" width="0.1550%" height="15" fill="rgb(231,124,27)" fg:x="3772" fg:w="10"/><text x="58.7306%" y="95.50"></text></g><g><title>[&lt;kernel::scheme::memory::MemoryScheme as kernel::scheme::KernelScheme&gt;::kfmap] (17 samples, 0.26%)</title><rect x="58.3876%" y="133" width="0.2636%" height="15" fill="rgb(249,195,6)" fg:x="3766" fg:w="17"/><text x="58.6376%" y="143.50"></text></g><g><title>[kernel::scheme::memory::MemoryScheme::fmap_anonymous] (15 samples, 0.23%)</title><rect x="58.4186%" y="117" width="0.2326%" height="15" fill="rgb(237,174,47)" fg:x="3768" fg:w="15"/><text x="58.6686%" y="127.50"></text></g><g><title>[kernel::memory::get_page_info] (1 samples, 0.02%)</title><rect x="58.6357%" y="101" width="0.0155%" height="15" fill="rgb(206,201,31)" fg:x="3782" fg:w="1"/><text x="58.8857%" y="111.50"></text></g><g><title>[&lt;kernel::scheme::user::UserScheme as kernel::scheme::KernelScheme&gt;::fsync] (6 samples, 0.09%)</title><rect x="58.6512%" y="133" width="0.0930%" height="15" fill="rgb(231,57,52)" fg:x="3783" fg:w="6"/><text x="58.9012%" y="143.50"></text></g><g><title>[kernel::scheme::user::UserInner::call] (6 samples, 0.09%)</title><rect x="58.6512%" y="117" width="0.0930%" height="15" fill="rgb(248,177,22)" fg:x="3783" fg:w="6"/><text x="58.9012%" y="127.50"></text></g><g><title>[kernel::scheme::user::UserInner::call_extended_inner] (6 samples, 0.09%)</title><rect x="58.6512%" y="101" width="0.0930%" height="15" fill="rgb(215,211,37)" fg:x="3783" fg:w="6"/><text x="58.9012%" y="111.50"></text></g><g><title>[kernel::context::switch::switch] (6 samples, 0.09%)</title><rect x="58.6512%" y="85" width="0.0930%" height="15" fill="rgb(241,128,51)" fg:x="3783" fg:w="6"/><text x="58.9012%" y="95.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter] (2 samples, 0.03%)</title><rect x="58.7132%" y="69" width="0.0310%" height="15" fill="rgb(227,165,31)" fg:x="3787" fg:w="2"/><text x="58.9632%" y="79.50"></text></g><g><title>[kernel::context::switch::switch] (38 samples, 0.59%)</title><rect x="58.7442%" y="85" width="0.5891%" height="15" fill="rgb(228,167,24)" fg:x="3789" fg:w="38"/><text x="58.9942%" y="95.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter] (14 samples, 0.22%)</title><rect x="59.1163%" y="69" width="0.2171%" height="15" fill="rgb(228,143,12)" fg:x="3813" fg:w="14"/><text x="59.3663%" y="79.50"></text></g><g><title>[kernel::syscall::fs::file_op_generic_ext] (65 samples, 1.01%)</title><rect x="58.3876%" y="149" width="1.0078%" height="15" fill="rgb(249,149,8)" fg:x="3766" fg:w="65"/><text x="58.6376%" y="159.50"></text></g><g><title>[&lt;kernel::scheme::user::UserScheme as kernel::scheme::KernelScheme&gt;::seek] (42 samples, 0.65%)</title><rect x="58.7442%" y="133" width="0.6512%" height="15" fill="rgb(243,35,44)" fg:x="3789" fg:w="42"/><text x="58.9942%" y="143.50"></text></g><g><title>[kernel::scheme::user::UserInner::call] (42 samples, 0.65%)</title><rect x="58.7442%" y="117" width="0.6512%" height="15" fill="rgb(246,89,9)" fg:x="3789" fg:w="42"/><text x="58.9942%" y="127.50"></text></g><g><title>[kernel::scheme::user::UserInner::call_extended_inner] (42 samples, 0.65%)</title><rect x="58.7442%" y="101" width="0.6512%" height="15" fill="rgb(233,213,13)" fg:x="3789" fg:w="42"/><text x="58.9942%" y="111.50"></text></g><g><title>[kernel::event::trigger] (4 samples, 0.06%)</title><rect x="59.3333%" y="85" width="0.0620%" height="15" fill="rgb(233,141,41)" fg:x="3827" fg:w="4"/><text x="59.5833%" y="95.50"></text></g><g><title>[kernel::sync::wait_condition::WaitCondition::notify] (3 samples, 0.05%)</title><rect x="59.3488%" y="69" width="0.0465%" height="15" fill="rgb(239,167,4)" fg:x="3828" fg:w="3"/><text x="59.5988%" y="79.50"></text></g><g><title>[kernel::syscall::fs::fstat] (2 samples, 0.03%)</title><rect x="59.3953%" y="149" width="0.0310%" height="15" fill="rgb(209,217,16)" fg:x="3831" fg:w="2"/><text x="59.6453%" y="159.50"></text></g><g><title>[&lt;kernel::scheme::user::UserScheme as kernel::scheme::KernelScheme&gt;::kfstat] (2 samples, 0.03%)</title><rect x="59.3953%" y="133" width="0.0310%" height="15" fill="rgb(219,88,35)" fg:x="3831" fg:w="2"/><text x="59.6453%" y="143.50"></text></g><g><title>[kernel::scheme::user::UserInner::call] (2 samples, 0.03%)</title><rect x="59.3953%" y="117" width="0.0310%" height="15" fill="rgb(220,193,23)" fg:x="3831" fg:w="2"/><text x="59.6453%" y="127.50"></text></g><g><title>[kernel::scheme::user::UserInner::call_extended_inner] (2 samples, 0.03%)</title><rect x="59.3953%" y="101" width="0.0310%" height="15" fill="rgb(230,90,52)" fg:x="3831" fg:w="2"/><text x="59.6453%" y="111.50"></text></g><g><title>[kernel::context::switch::switch] (2 samples, 0.03%)</title><rect x="59.3953%" y="85" width="0.0310%" height="15" fill="rgb(252,106,19)" fg:x="3831" fg:w="2"/><text x="59.6453%" y="95.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter] (1 samples, 0.02%)</title><rect x="59.4109%" y="69" width="0.0155%" height="15" fill="rgb(206,74,20)" fg:x="3832" fg:w="1"/><text x="59.6609%" y="79.50"></text></g><g><title>[kernel::context::memory::AddrSpace::munmap_inner] (2 samples, 0.03%)</title><rect x="59.4264%" y="117" width="0.0310%" height="15" fill="rgb(230,138,44)" fg:x="3833" fg:w="2"/><text x="59.6764%" y="127.50"></text></g><g><title>[rmm::page::mapper::unmap_phys_inner] (2 samples, 0.03%)</title><rect x="59.4264%" y="101" width="0.0310%" height="15" fill="rgb(235,182,43)" fg:x="3833" fg:w="2"/><text x="59.6764%" y="111.50"></text></g><g><title>[rmm::page::mapper::unmap_phys_inner] (2 samples, 0.03%)</title><rect x="59.4264%" y="85" width="0.0310%" height="15" fill="rgb(242,16,51)" fg:x="3833" fg:w="2"/><text x="59.6764%" y="95.50"></text></g><g><title>[rmm::page::mapper::unmap_phys_inner] (1 samples, 0.02%)</title><rect x="59.4419%" y="69" width="0.0155%" height="15" fill="rgb(248,9,4)" fg:x="3834" fg:w="1"/><text x="59.6919%" y="79.50"></text></g><g><title>[kernel::syscall::fs::funmap] (3 samples, 0.05%)</title><rect x="59.4264%" y="149" width="0.0465%" height="15" fill="rgb(210,31,22)" fg:x="3833" fg:w="3"/><text x="59.6764%" y="159.50"></text></g><g><title>[kernel::context::memory::AddrSpaceWrapper::munmap] (3 samples, 0.05%)</title><rect x="59.4264%" y="133" width="0.0465%" height="15" fill="rgb(239,54,39)" fg:x="3833" fg:w="3"/><text x="59.6764%" y="143.50"></text></g><g><title>[kernel::context::memory::Flusher::flush] (1 samples, 0.02%)</title><rect x="59.4574%" y="117" width="0.0155%" height="15" fill="rgb(230,99,41)" fg:x="3835" fg:w="1"/><text x="59.7074%" y="127.50"></text></g><g><title>[memcpy] (1 samples, 0.02%)</title><rect x="59.4574%" y="101" width="0.0155%" height="15" fill="rgb(253,106,12)" fg:x="3835" fg:w="1"/><text x="59.7074%" y="111.50"></text></g><g><title>[kernel::syscall::process::exit] (2 samples, 0.03%)</title><rect x="59.4729%" y="149" width="0.0310%" height="15" fill="rgb(213,46,41)" fg:x="3836" fg:w="2"/><text x="59.7229%" y="159.50"></text></g><g><title>[&lt;kernel::context::memory::AddrSpace as core::ops::drop::Drop&gt;::drop] (2 samples, 0.03%)</title><rect x="59.4729%" y="133" width="0.0310%" height="15" fill="rgb(215,133,35)" fg:x="3836" fg:w="2"/><text x="59.7229%" y="143.50"></text></g><g><title>[rmm::page::mapper::unmap_phys_inner] (2 samples, 0.03%)</title><rect x="59.4729%" y="117" width="0.0310%" height="15" fill="rgb(213,28,5)" fg:x="3836" fg:w="2"/><text x="59.7229%" y="127.50"></text></g><g><title>[rmm::page::mapper::unmap_phys_inner] (2 samples, 0.03%)</title><rect x="59.4729%" y="101" width="0.0310%" height="15" fill="rgb(215,77,49)" fg:x="3836" fg:w="2"/><text x="59.7229%" y="111.50"></text></g><g><title>[rmm::page::mapper::unmap_phys_inner] (1 samples, 0.02%)</title><rect x="59.4884%" y="85" width="0.0155%" height="15" fill="rgb(248,100,22)" fg:x="3837" fg:w="1"/><text x="59.7384%" y="95.50"></text></g><g><title>[kernel::syscall::process::kill] (8 samples, 0.12%)</title><rect x="59.5039%" y="149" width="0.1240%" height="15" fill="rgb(208,67,9)" fg:x="3838" fg:w="8"/><text x="59.7539%" y="159.50"></text></g><g><title>[kernel::context::switch::switch] (8 samples, 0.12%)</title><rect x="59.5039%" y="133" width="0.1240%" height="15" fill="rgb(219,133,21)" fg:x="3838" fg:w="8"/><text x="59.7539%" y="143.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter] (7 samples, 0.11%)</title><rect x="59.5194%" y="117" width="0.1085%" height="15" fill="rgb(246,46,29)" fg:x="3839" fg:w="7"/><text x="59.7694%" y="127.50"></text></g><g><title>[kernel::syscall::process::waitpid] (2 samples, 0.03%)</title><rect x="59.6279%" y="149" width="0.0310%" height="15" fill="rgb(246,185,52)" fg:x="3846" fg:w="2"/><text x="59.8779%" y="159.50"></text></g><g><title>[kernel::sync::wait_condition::WaitCondition::wait] (2 samples, 0.03%)</title><rect x="59.6279%" y="133" width="0.0310%" height="15" fill="rgb(252,136,11)" fg:x="3846" fg:w="2"/><text x="59.8779%" y="143.50"></text></g><g><title>[kernel::context::switch::switch] (2 samples, 0.03%)</title><rect x="59.6279%" y="117" width="0.0310%" height="15" fill="rgb(219,138,53)" fg:x="3846" fg:w="2"/><text x="59.8779%" y="127.50"></text></g><g><title>[kernel::syscall::syscall] (1,538 samples, 23.84%)</title><rect x="36.2016%" y="165" width="23.8450%" height="15" fill="rgb(211,51,23)" fg:x="2335" fg:w="1538"/><text x="36.4516%" y="175.50">[kernel::syscall::syscall]</text></g><g><title>[kernel::syscall::time::clock_gettime] (25 samples, 0.39%)</title><rect x="59.6589%" y="149" width="0.3876%" height="15" fill="rgb(247,221,28)" fg:x="3848" fg:w="25"/><text x="59.9089%" y="159.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter] (20 samples, 0.31%)</title><rect x="59.7364%" y="133" width="0.3101%" height="15" fill="rgb(251,222,45)" fg:x="3853" fg:w="20"/><text x="59.9864%" y="143.50"></text></g><g><title>[__inner_syscall_instruction] (1,540 samples, 23.88%)</title><rect x="36.1860%" y="181" width="23.8760%" height="15" fill="rgb(217,162,53)" fg:x="2334" fg:w="1540"/><text x="36.4360%" y="191.50">[__inner_syscall_instruction]</text></g><g><title>[redox_path::RedoxPath::from_absolute] (1 samples, 0.02%)</title><rect x="60.0465%" y="165" width="0.0155%" height="15" fill="rgb(229,93,14)" fg:x="3873" fg:w="1"/><text x="60.2965%" y="175.50"></text></g><g><title>[kernel::context::memory::Flusher::flush] (1 samples, 0.02%)</title><rect x="60.0930%" y="133" width="0.0155%" height="15" fill="rgb(209,67,49)" fg:x="3876" fg:w="1"/><text x="60.3430%" y="143.50"></text></g><g><title>[memcpy] (1 samples, 0.02%)</title><rect x="60.0930%" y="117" width="0.0155%" height="15" fill="rgb(213,87,29)" fg:x="3876" fg:w="1"/><text x="60.3430%" y="127.50"></text></g><g><title>[kernel::memory::init_frame] (3 samples, 0.05%)</title><rect x="60.1085%" y="133" width="0.0465%" height="15" fill="rgb(205,151,52)" fg:x="3877" fg:w="3"/><text x="60.3585%" y="143.50"></text></g><g><title>[&lt;rmm::allocator::frame::buddy::BuddyAllocator&lt;A&gt; as rmm::allocator::frame::FrameAllocator&gt;::allocate] (2 samples, 0.03%)</title><rect x="60.1240%" y="117" width="0.0310%" height="15" fill="rgb(253,215,39)" fg:x="3878" fg:w="2"/><text x="60.3740%" y="127.50"></text></g><g><title>[memset] (2 samples, 0.03%)</title><rect x="60.1240%" y="101" width="0.0310%" height="15" fill="rgb(221,220,41)" fg:x="3878" fg:w="2"/><text x="60.3740%" y="111.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::syscall::syscall_instruction] (1,549 samples, 24.02%)</title><rect x="36.1550%" y="197" width="24.0155%" height="15" fill="rgb(218,133,21)" fg:x="2332" fg:w="1549"/><text x="36.4050%" y="207.50">[kernel::arch::x86_64::interrupt::sysc..</text></g><g><title>[kernel::arch::x86_64::interrupt::exception::page] (7 samples, 0.11%)</title><rect x="60.0620%" y="181" width="0.1085%" height="15" fill="rgb(221,193,43)" fg:x="3874" fg:w="7"/><text x="60.3120%" y="191.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::exception::page::inner] (5 samples, 0.08%)</title><rect x="60.0930%" y="165" width="0.0775%" height="15" fill="rgb(240,128,52)" fg:x="3876" fg:w="5"/><text x="60.3430%" y="175.50"></text></g><g><title>[kernel::context::memory::correct_inner] (5 samples, 0.08%)</title><rect x="60.0930%" y="149" width="0.0775%" height="15" fill="rgb(253,114,12)" fg:x="3876" fg:w="5"/><text x="60.3430%" y="159.50"></text></g><g><title>[rmm::page::mapper::PageMapper&lt;A,F&gt;::map_phys] (1 samples, 0.02%)</title><rect x="60.1550%" y="133" width="0.0155%" height="15" fill="rgb(215,223,47)" fg:x="3880" fg:w="1"/><text x="60.4050%" y="143.50"></text></g><g><title>[kernel::arch::x86_shared::interrupt::ipi::pit::inner] (3 samples, 0.05%)</title><rect x="60.1705%" y="197" width="0.0465%" height="15" fill="rgb(248,225,23)" fg:x="3881" fg:w="3"/><text x="60.4205%" y="207.50"></text></g><g><title>[kernel::arch::x86_shared::interrupt::ipi::tlb::inner] (7 samples, 0.11%)</title><rect x="60.2171%" y="197" width="0.1085%" height="15" fill="rgb(250,108,0)" fg:x="3884" fg:w="7"/><text x="60.4671%" y="207.50"></text></g><g><title>[kernel::arch::x86_shared::interrupt::ipi::tlb] (4 samples, 0.06%)</title><rect x="60.3256%" y="197" width="0.0620%" height="15" fill="rgb(228,208,7)" fg:x="3891" fg:w="4"/><text x="60.5756%" y="207.50"></text></g><g><title>[kernel::arch::x86_shared::interrupt::ipi::wakeup::inner] (35 samples, 0.54%)</title><rect x="60.3876%" y="197" width="0.5426%" height="15" fill="rgb(244,45,10)" fg:x="3895" fg:w="35"/><text x="60.6376%" y="207.50"></text></g><g><title>[kernel::arch::x86_shared::interrupt::ipi::wakeup] (44 samples, 0.68%)</title><rect x="60.9302%" y="197" width="0.6822%" height="15" fill="rgb(207,125,25)" fg:x="3930" fg:w="44"/><text x="61.1802%" y="207.50"></text></g><g><title>[kernel::arch::x86_shared::interrupt::ipi::wakeup::inner] (13 samples, 0.20%)</title><rect x="61.4109%" y="181" width="0.2016%" height="15" fill="rgb(210,195,18)" fg:x="3961" fg:w="13"/><text x="61.6609%" y="191.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter] (800 samples, 12.40%)</title><rect x="61.6124%" y="197" width="12.4031%" height="15" fill="rgb(249,80,12)" fg:x="3974" fg:w="800"/><text x="61.8624%" y="207.50">[kernel::arch::x86_..</text></g><g><title>[kernel::context::switch::switch] (1,672 samples, 25.92%)</title><rect x="74.0155%" y="197" width="25.9225%" height="15" fill="rgb(221,65,9)" fg:x="4774" fg:w="1672"/><text x="74.2655%" y="207.50">[kernel::context::switch::switch]</text></g><g><title>all (6,450 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(235,49,36)" fg:x="0" fg:w="6450"/><text x="0.2500%" y="239.50"></text></g><g><title>kernel (6,450 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(225,32,20)" fg:x="0" fg:w="6450"/><text x="0.2500%" y="223.50">kernel</text></g><g><title>[kernel::context::switch::switch_finish_hook] (4 samples, 0.06%)</title><rect x="99.9380%" y="197" width="0.0620%" height="15" fill="rgb(215,141,46)" fg:x="6446" fg:w="4"/><text x="100.1880%" y="207.50"></text></g></svg></svg>
