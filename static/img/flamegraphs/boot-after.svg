<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="261.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="261.00"> </text><svg id="frames" x="10" width="1180" total_samples="6316"><g><title>[&lt;alloc::collections::btree::map::Range&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next] (3 samples, 0.05%)</title><rect x="0.0000%" y="197" width="0.0475%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3"/><text x="0.2500%" y="207.50"></text></g><g><title>[__udivti3] (1 samples, 0.02%)</title><rect x="0.0475%" y="197" width="0.0158%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="1"/><text x="0.2975%" y="207.50"></text></g><g><title>[alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::range] (6 samples, 0.09%)</title><rect x="0.0633%" y="197" width="0.0950%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="6"/><text x="0.3133%" y="207.50"></text></g><g><title>[kernel::context::memory::Flusher::flush] (1 samples, 0.02%)</title><rect x="0.3642%" y="165" width="0.0158%" height="15" fill="rgb(248,212,6)" fg:x="23" fg:w="1"/><text x="0.6142%" y="175.50"></text></g><g><title>[kernel::context::memory::Flusher::flush] (10 samples, 0.16%)</title><rect x="0.3958%" y="149" width="0.1583%" height="15" fill="rgb(208,68,35)" fg:x="25" fg:w="10"/><text x="0.6458%" y="159.50"></text></g><g><title>[memcpy] (4 samples, 0.06%)</title><rect x="0.4908%" y="133" width="0.0633%" height="15" fill="rgb(232,128,0)" fg:x="31" fg:w="4"/><text x="0.7408%" y="143.50"></text></g><g><title>[kernel::context::memory::Flusher::flush] (2 samples, 0.03%)</title><rect x="0.5541%" y="133" width="0.0317%" height="15" fill="rgb(207,160,47)" fg:x="35" fg:w="2"/><text x="0.8041%" y="143.50"></text></g><g><title>[memcpy] (1 samples, 0.02%)</title><rect x="0.5700%" y="117" width="0.0158%" height="15" fill="rgb(228,23,34)" fg:x="36" fg:w="1"/><text x="0.8200%" y="127.50"></text></g><g><title>[kernel::context::memory::correct_inner] (9 samples, 0.14%)</title><rect x="0.5541%" y="149" width="0.1425%" height="15" fill="rgb(218,30,26)" fg:x="35" fg:w="9"/><text x="0.8041%" y="159.50"></text></g><g><title>[kernel::context::memory::correct_inner] (7 samples, 0.11%)</title><rect x="0.5858%" y="133" width="0.1108%" height="15" fill="rgb(220,122,19)" fg:x="37" fg:w="7"/><text x="0.8358%" y="143.50"></text></g><g><title>[kernel::memory::init_frame] (6 samples, 0.09%)</title><rect x="0.6016%" y="117" width="0.0950%" height="15" fill="rgb(250,228,42)" fg:x="38" fg:w="6"/><text x="0.8516%" y="127.50"></text></g><g><title>[kernel::memory::allocate_frames] (6 samples, 0.09%)</title><rect x="0.6016%" y="101" width="0.0950%" height="15" fill="rgb(240,193,28)" fg:x="38" fg:w="6"/><text x="0.8516%" y="111.50"></text></g><g><title>[memset] (6 samples, 0.09%)</title><rect x="0.6016%" y="85" width="0.0950%" height="15" fill="rgb(216,20,37)" fg:x="38" fg:w="6"/><text x="0.8516%" y="95.50"></text></g><g><title>[kernel::context::memory::cow] (3 samples, 0.05%)</title><rect x="0.6966%" y="149" width="0.0475%" height="15" fill="rgb(206,188,39)" fg:x="44" fg:w="3"/><text x="0.9466%" y="159.50"></text></g><g><title>[kernel::memory::allocate_frames] (3 samples, 0.05%)</title><rect x="0.6966%" y="133" width="0.0475%" height="15" fill="rgb(217,207,13)" fg:x="44" fg:w="3"/><text x="0.9466%" y="143.50"></text></g><g><title>[memset] (3 samples, 0.05%)</title><rect x="0.6966%" y="117" width="0.0475%" height="15" fill="rgb(231,73,38)" fg:x="44" fg:w="3"/><text x="0.9466%" y="127.50"></text></g><g><title>[kernel::memory::get_page_info] (1 samples, 0.02%)</title><rect x="0.7441%" y="149" width="0.0158%" height="15" fill="rgb(225,20,46)" fg:x="47" fg:w="1"/><text x="0.9941%" y="159.50"></text></g><g><title>[kernel::memory::init_frame] (18 samples, 0.28%)</title><rect x="0.7600%" y="149" width="0.2850%" height="15" fill="rgb(210,31,41)" fg:x="48" fg:w="18"/><text x="1.0100%" y="159.50"></text></g><g><title>[kernel::memory::allocate_frames] (18 samples, 0.28%)</title><rect x="0.7600%" y="133" width="0.2850%" height="15" fill="rgb(221,200,47)" fg:x="48" fg:w="18"/><text x="1.0100%" y="143.50"></text></g><g><title>[memset] (18 samples, 0.28%)</title><rect x="0.7600%" y="117" width="0.2850%" height="15" fill="rgb(226,26,5)" fg:x="48" fg:w="18"/><text x="1.0100%" y="127.50"></text></g><g><title>[memcpy] (2 samples, 0.03%)</title><rect x="1.0450%" y="149" width="0.0317%" height="15" fill="rgb(249,33,26)" fg:x="66" fg:w="2"/><text x="1.2950%" y="159.50"></text></g><g><title>[rmm::page::mapper::PageMapper&lt;A,F&gt;::map_phys] (1 samples, 0.02%)</title><rect x="1.0766%" y="149" width="0.0158%" height="15" fill="rgb(235,183,28)" fg:x="68" fg:w="1"/><text x="1.3266%" y="159.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::exception::page] (61 samples, 0.97%)</title><rect x="0.1583%" y="197" width="0.9658%" height="15" fill="rgb(221,5,38)" fg:x="10" fg:w="61"/><text x="0.4083%" y="207.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::exception::page::inner] (52 samples, 0.82%)</title><rect x="0.3008%" y="181" width="0.8233%" height="15" fill="rgb(247,18,42)" fg:x="19" fg:w="52"/><text x="0.5508%" y="191.50"></text></g><g><title>[kernel::context::memory::correct_inner] (47 samples, 0.74%)</title><rect x="0.3800%" y="165" width="0.7441%" height="15" fill="rgb(241,131,45)" fg:x="24" fg:w="47"/><text x="0.6300%" y="175.50"></text></g><g><title>[rmm::page::mapper::PageMapper&lt;A,F&gt;::translate] (2 samples, 0.03%)</title><rect x="1.0925%" y="149" width="0.0317%" height="15" fill="rgb(249,31,29)" fg:x="69" fg:w="2"/><text x="1.3425%" y="159.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::irq::generic_irq::inner] (2 samples, 0.03%)</title><rect x="1.1241%" y="197" width="0.0317%" height="15" fill="rgb(225,111,53)" fg:x="71" fg:w="2"/><text x="1.3741%" y="207.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::irq::pci2::inner] (1 samples, 0.02%)</title><rect x="1.1558%" y="197" width="0.0158%" height="15" fill="rgb(238,160,17)" fg:x="73" fg:w="1"/><text x="1.4058%" y="207.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::irq::pci2] (5 samples, 0.08%)</title><rect x="1.1716%" y="197" width="0.0792%" height="15" fill="rgb(214,148,48)" fg:x="74" fg:w="5"/><text x="1.4216%" y="207.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::irq::pci2::inner] (3 samples, 0.05%)</title><rect x="1.2033%" y="181" width="0.0475%" height="15" fill="rgb(232,36,49)" fg:x="76" fg:w="3"/><text x="1.4533%" y="191.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::irq::pit_stack::inner] (15 samples, 0.24%)</title><rect x="1.2508%" y="197" width="0.2375%" height="15" fill="rgb(209,103,24)" fg:x="79" fg:w="15"/><text x="1.5008%" y="207.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::irq::pit_stack] (19 samples, 0.30%)</title><rect x="1.4883%" y="197" width="0.3008%" height="15" fill="rgb(229,88,8)" fg:x="94" fg:w="19"/><text x="1.7383%" y="207.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::irq::pit_stack::inner] (15 samples, 0.24%)</title><rect x="1.5516%" y="181" width="0.2375%" height="15" fill="rgb(213,181,19)" fg:x="98" fg:w="15"/><text x="1.8016%" y="191.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter] (11 samples, 0.17%)</title><rect x="1.6149%" y="165" width="0.1742%" height="15" fill="rgb(254,191,54)" fg:x="102" fg:w="11"/><text x="1.8649%" y="175.50"></text></g><g><title>[&lt;kernel::scheme::debug::DebugScheme as kernel::scheme::KernelScheme&gt;::kwrite] (229 samples, 3.63%)</title><rect x="1.9474%" y="149" width="3.6257%" height="15" fill="rgb(241,83,37)" fg:x="123" fg:w="229"/><text x="2.1974%" y="159.50">[&lt;ke..</text></g><g><title>[kernel::arch::x86_shared::debug::Writer::write] (227 samples, 3.59%)</title><rect x="1.9791%" y="133" width="3.5940%" height="15" fill="rgb(233,36,39)" fg:x="125" fg:w="227"/><text x="2.2291%" y="143.50">[ker..</text></g><g><title>[&lt;kernel::scheme::event::EventScheme as kernel::scheme::KernelScheme&gt;::kread] (129 samples, 2.04%)</title><rect x="5.5731%" y="149" width="2.0424%" height="15" fill="rgb(226,3,54)" fg:x="352" fg:w="129"/><text x="5.8231%" y="159.50">[..</text></g><g><title>[kernel::context::switch::switch] (129 samples, 2.04%)</title><rect x="5.5731%" y="133" width="2.0424%" height="15" fill="rgb(245,192,40)" fg:x="352" fg:w="129"/><text x="5.8231%" y="143.50">[..</text></g><g><title>[kernel::arch::x86_shared::time::counter] (42 samples, 0.66%)</title><rect x="6.9506%" y="117" width="0.6650%" height="15" fill="rgb(238,167,29)" fg:x="439" fg:w="42"/><text x="7.2006%" y="127.50"></text></g><g><title>[&lt;kernel::scheme::irq::IrqScheme as kernel::scheme::KernelScheme&gt;::kwrite] (2 samples, 0.03%)</title><rect x="7.6156%" y="149" width="0.0317%" height="15" fill="rgb(232,182,51)" fg:x="481" fg:w="2"/><text x="7.8656%" y="159.50"></text></g><g><title>[&lt;kernel::scheme::pipe::PipeScheme as kernel::scheme::KernelScheme&gt;::kread] (1 samples, 0.02%)</title><rect x="7.6472%" y="149" width="0.0158%" height="15" fill="rgb(231,60,39)" fg:x="483" fg:w="1"/><text x="7.8972%" y="159.50"></text></g><g><title>[kernel::sync::wait_condition::WaitCondition::wait] (1 samples, 0.02%)</title><rect x="7.6472%" y="133" width="0.0158%" height="15" fill="rgb(208,69,12)" fg:x="483" fg:w="1"/><text x="7.8972%" y="143.50"></text></g><g><title>[alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::range] (1 samples, 0.02%)</title><rect x="7.6472%" y="117" width="0.0158%" height="15" fill="rgb(235,93,37)" fg:x="483" fg:w="1"/><text x="7.8972%" y="127.50"></text></g><g><title>[&lt;alloc::collections::btree::map::Range&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next] (1 samples, 0.02%)</title><rect x="7.7264%" y="133" width="0.0158%" height="15" fill="rgb(213,116,39)" fg:x="488" fg:w="1"/><text x="7.9764%" y="143.50"></text></g><g><title>[&lt;alloc::collections::btree::map::Range&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next] (1 samples, 0.02%)</title><rect x="13.2204%" y="117" width="0.0158%" height="15" fill="rgb(222,207,29)" fg:x="835" fg:w="1"/><text x="13.4704%" y="127.50"></text></g><g><title>[alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::range] (1 samples, 0.02%)</title><rect x="13.2362%" y="117" width="0.0158%" height="15" fill="rgb(206,96,30)" fg:x="836" fg:w="1"/><text x="13.4862%" y="127.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter] (198 samples, 3.13%)</title><rect x="13.2521%" y="117" width="3.1349%" height="15" fill="rgb(218,138,4)" fg:x="837" fg:w="198"/><text x="13.5021%" y="127.50">[ke..</text></g><g><title>[&lt;kernel::scheme::root::RootScheme as kernel::scheme::KernelScheme&gt;::kread] (554 samples, 8.77%)</title><rect x="7.6631%" y="149" width="8.7714%" height="15" fill="rgb(250,191,14)" fg:x="484" fg:w="554"/><text x="7.9131%" y="159.50">[&lt;kernel::sc..</text></g><g><title>[kernel::context::switch::switch] (549 samples, 8.69%)</title><rect x="7.7422%" y="133" width="8.6922%" height="15" fill="rgb(239,60,40)" fg:x="489" fg:w="549"/><text x="7.9922%" y="143.50">[kernel::con..</text></g><g><title>[kernel::context::switch::switch_finish_hook] (3 samples, 0.05%)</title><rect x="16.3870%" y="117" width="0.0475%" height="15" fill="rgb(206,27,48)" fg:x="1035" fg:w="3"/><text x="16.6370%" y="127.50"></text></g><g><title>[&lt;kernel::scheme::root::RootScheme as kernel::scheme::KernelScheme&gt;::kwrite] (42 samples, 0.66%)</title><rect x="16.4345%" y="149" width="0.6650%" height="15" fill="rgb(225,35,8)" fg:x="1038" fg:w="42"/><text x="16.6845%" y="159.50"></text></g><g><title>[kernel::scheme::user::UserInner::respond] (42 samples, 0.66%)</title><rect x="16.4345%" y="133" width="0.6650%" height="15" fill="rgb(250,213,24)" fg:x="1038" fg:w="42"/><text x="16.6845%" y="143.50"></text></g><g><title>[&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop] (1 samples, 0.02%)</title><rect x="17.0836%" y="117" width="0.0158%" height="15" fill="rgb(247,123,22)" fg:x="1079" fg:w="1"/><text x="17.3336%" y="127.50"></text></g><g><title>[&lt;kernel::scheme::time::TimeScheme as kernel::scheme::KernelScheme&gt;::kread] (1 samples, 0.02%)</title><rect x="17.0994%" y="149" width="0.0158%" height="15" fill="rgb(231,138,38)" fg:x="1080" fg:w="1"/><text x="17.3494%" y="159.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter] (1 samples, 0.02%)</title><rect x="17.0994%" y="133" width="0.0158%" height="15" fill="rgb(231,145,46)" fg:x="1080" fg:w="1"/><text x="17.3494%" y="143.50"></text></g><g><title>[&lt;kernel::scheme::user::UserScheme as kernel::scheme::KernelScheme&gt;::kfpath] (1 samples, 0.02%)</title><rect x="17.1153%" y="149" width="0.0158%" height="15" fill="rgb(251,118,11)" fg:x="1081" fg:w="1"/><text x="17.3653%" y="159.50"></text></g><g><title>[kernel::scheme::user::UserInner::call] (1 samples, 0.02%)</title><rect x="17.1153%" y="133" width="0.0158%" height="15" fill="rgb(217,147,25)" fg:x="1081" fg:w="1"/><text x="17.3653%" y="143.50"></text></g><g><title>[kernel::scheme::user::UserInner::call_extended_inner] (1 samples, 0.02%)</title><rect x="17.1153%" y="117" width="0.0158%" height="15" fill="rgb(247,81,37)" fg:x="1081" fg:w="1"/><text x="17.3653%" y="127.50"></text></g><g><title>[kernel::context::switch::switch] (1 samples, 0.02%)</title><rect x="17.1153%" y="101" width="0.0158%" height="15" fill="rgb(209,12,38)" fg:x="1081" fg:w="1"/><text x="17.3653%" y="111.50"></text></g><g><title>[kernel::context::switch::switch] (14 samples, 0.22%)</title><rect x="17.1311%" y="117" width="0.2217%" height="15" fill="rgb(227,1,9)" fg:x="1082" fg:w="14"/><text x="17.3811%" y="127.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter] (5 samples, 0.08%)</title><rect x="17.2736%" y="101" width="0.0792%" height="15" fill="rgb(248,47,43)" fg:x="1091" fg:w="5"/><text x="17.5236%" y="111.50"></text></g><g><title>[&lt;kernel::scheme::user::UserScheme as kernel::scheme::KernelScheme&gt;::kopen] (15 samples, 0.24%)</title><rect x="17.1311%" y="149" width="0.2375%" height="15" fill="rgb(221,10,30)" fg:x="1082" fg:w="15"/><text x="17.3811%" y="159.50"></text></g><g><title>[kernel::scheme::user::UserInner::call_extended_inner] (15 samples, 0.24%)</title><rect x="17.1311%" y="133" width="0.2375%" height="15" fill="rgb(210,229,1)" fg:x="1082" fg:w="15"/><text x="17.3811%" y="143.50"></text></g><g><title>[kernel::sync::wait_condition::WaitCondition::notify] (1 samples, 0.02%)</title><rect x="17.3528%" y="117" width="0.0158%" height="15" fill="rgb(222,148,37)" fg:x="1096" fg:w="1"/><text x="17.6028%" y="127.50"></text></g><g><title>[core::ptr::drop_in_place&lt;kernel::scheme::user::CaptureGuard&lt;_,_&gt;&gt;] (1 samples, 0.02%)</title><rect x="17.3844%" y="133" width="0.0158%" height="15" fill="rgb(234,67,33)" fg:x="1098" fg:w="1"/><text x="17.6344%" y="143.50"></text></g><g><title>[&lt;kernel::context::context::BorrowedHtBuf as core::ops::drop::Drop&gt;::drop] (1 samples, 0.02%)</title><rect x="17.3844%" y="117" width="0.0158%" height="15" fill="rgb(247,98,35)" fg:x="1098" fg:w="1"/><text x="17.6344%" y="127.50"></text></g><g><title>[kernel::context::current] (1 samples, 0.02%)</title><rect x="17.3844%" y="101" width="0.0158%" height="15" fill="rgb(247,138,52)" fg:x="1098" fg:w="1"/><text x="17.6344%" y="111.50"></text></g><g><title>[kernel::arch::x86_64::arch_copy_to_user] (1 samples, 0.02%)</title><rect x="17.4003%" y="133" width="0.0158%" height="15" fill="rgb(213,79,30)" fg:x="1099" fg:w="1"/><text x="17.6503%" y="143.50"></text></g><g><title>[alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::range] (1 samples, 0.02%)</title><rect x="17.4161%" y="85" width="0.0158%" height="15" fill="rgb(246,177,23)" fg:x="1100" fg:w="1"/><text x="17.6661%" y="95.50"></text></g><g><title>[kernel::context::memory::AddrSpace::munmap_inner] (3 samples, 0.05%)</title><rect x="17.4161%" y="101" width="0.0475%" height="15" fill="rgb(230,62,27)" fg:x="1100" fg:w="3"/><text x="17.6661%" y="111.50"></text></g><g><title>[kernel::context::memory::Flusher::flush] (2 samples, 0.03%)</title><rect x="17.4319%" y="85" width="0.0317%" height="15" fill="rgb(216,154,8)" fg:x="1101" fg:w="2"/><text x="17.6819%" y="95.50"></text></g><g><title>[kernel::context::memory::Flusher::flush] (7 samples, 0.11%)</title><rect x="17.4636%" y="101" width="0.1108%" height="15" fill="rgb(244,35,45)" fg:x="1103" fg:w="7"/><text x="17.7136%" y="111.50"></text></g><g><title>[kernel::scheme::user::CaptureGuard&lt;_,_&gt;::release_inner] (11 samples, 0.17%)</title><rect x="17.4161%" y="133" width="0.1742%" height="15" fill="rgb(251,115,12)" fg:x="1100" fg:w="11"/><text x="17.6661%" y="143.50"></text></g><g><title>[kernel::context::memory::AddrSpaceWrapper::munmap] (11 samples, 0.17%)</title><rect x="17.4161%" y="117" width="0.1742%" height="15" fill="rgb(240,54,50)" fg:x="1100" fg:w="11"/><text x="17.6661%" y="127.50"></text></g><g><title>[kernel::memory::get_page_info] (1 samples, 0.02%)</title><rect x="17.5744%" y="101" width="0.0158%" height="15" fill="rgb(233,84,52)" fg:x="1110" fg:w="1"/><text x="17.8244%" y="111.50"></text></g><g><title>[kernel::context::switch::switch] (41 samples, 0.65%)</title><rect x="17.6061%" y="101" width="0.6491%" height="15" fill="rgb(207,117,47)" fg:x="1112" fg:w="41"/><text x="17.8561%" y="111.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter] (18 samples, 0.28%)</title><rect x="17.9702%" y="85" width="0.2850%" height="15" fill="rgb(249,43,39)" fg:x="1135" fg:w="18"/><text x="18.2202%" y="95.50"></text></g><g><title>[kernel::scheme::user::UserInner::call] (43 samples, 0.68%)</title><rect x="17.5902%" y="133" width="0.6808%" height="15" fill="rgb(209,38,44)" fg:x="1111" fg:w="43"/><text x="17.8402%" y="143.50"></text></g><g><title>[kernel::scheme::user::UserInner::call_extended_inner] (43 samples, 0.68%)</title><rect x="17.5902%" y="117" width="0.6808%" height="15" fill="rgb(236,212,23)" fg:x="1111" fg:w="43"/><text x="17.8402%" y="127.50"></text></g><g><title>[kernel::event::trigger] (1 samples, 0.02%)</title><rect x="18.2552%" y="101" width="0.0158%" height="15" fill="rgb(242,79,21)" fg:x="1153" fg:w="1"/><text x="18.5052%" y="111.50"></text></g><g><title>[kernel::sync::wait_condition::WaitCondition::notify] (1 samples, 0.02%)</title><rect x="18.2552%" y="85" width="0.0158%" height="15" fill="rgb(211,96,35)" fg:x="1153" fg:w="1"/><text x="18.5052%" y="95.50"></text></g><g><title>[&lt;kernel::scheme::user::UserScheme as kernel::scheme::KernelScheme&gt;::kread] (58 samples, 0.92%)</title><rect x="17.3686%" y="149" width="0.9183%" height="15" fill="rgb(253,215,40)" fg:x="1097" fg:w="58"/><text x="17.6186%" y="159.50"></text></g><g><title>[kernel::scheme::user::UserInner::capture_inner] (1 samples, 0.02%)</title><rect x="18.2711%" y="133" width="0.0158%" height="15" fill="rgb(211,81,21)" fg:x="1154" fg:w="1"/><text x="18.5211%" y="143.50"></text></g><g><title>[kernel::context::memory::AddrSpace::mmap] (1 samples, 0.02%)</title><rect x="18.2711%" y="117" width="0.0158%" height="15" fill="rgb(208,190,38)" fg:x="1154" fg:w="1"/><text x="18.5211%" y="127.50"></text></g><g><title>[kernel::context::memory::Flusher::flush] (1 samples, 0.02%)</title><rect x="18.2711%" y="101" width="0.0158%" height="15" fill="rgb(235,213,38)" fg:x="1154" fg:w="1"/><text x="18.5211%" y="111.50"></text></g><g><title>[core::ptr::drop_in_place&lt;kernel::scheme::user::CaptureGuard&lt;_,_&gt;&gt;] (2 samples, 0.03%)</title><rect x="18.3027%" y="133" width="0.0317%" height="15" fill="rgb(237,122,38)" fg:x="1156" fg:w="2"/><text x="18.5527%" y="143.50"></text></g><g><title>[&lt;kernel::context::context::BorrowedHtBuf as core::ops::drop::Drop&gt;::drop] (2 samples, 0.03%)</title><rect x="18.3027%" y="117" width="0.0317%" height="15" fill="rgb(244,218,35)" fg:x="1156" fg:w="2"/><text x="18.5527%" y="127.50"></text></g><g><title>[kernel::context::current] (2 samples, 0.03%)</title><rect x="18.3027%" y="101" width="0.0317%" height="15" fill="rgb(240,68,47)" fg:x="1156" fg:w="2"/><text x="18.5527%" y="111.50"></text></g><g><title>[kernel::arch::x86_64::arch_copy_to_user] (3 samples, 0.05%)</title><rect x="18.3344%" y="133" width="0.0475%" height="15" fill="rgb(210,16,53)" fg:x="1158" fg:w="3"/><text x="18.5844%" y="143.50"></text></g><g><title>[alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::range] (1 samples, 0.02%)</title><rect x="18.4452%" y="85" width="0.0158%" height="15" fill="rgb(235,124,12)" fg:x="1165" fg:w="1"/><text x="18.6952%" y="95.50"></text></g><g><title>[alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove] (3 samples, 0.05%)</title><rect x="18.4769%" y="69" width="0.0475%" height="15" fill="rgb(224,169,11)" fg:x="1167" fg:w="3"/><text x="18.7269%" y="79.50"></text></g><g><title>[alloc::collections::btree::remove::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv] (1 samples, 0.02%)</title><rect x="18.5085%" y="53" width="0.0158%" height="15" fill="rgb(250,166,2)" fg:x="1169" fg:w="1"/><text x="18.7585%" y="63.50"></text></g><g><title>[kernel::context::memory::UserGrants::remove] (5 samples, 0.08%)</title><rect x="18.4611%" y="85" width="0.0792%" height="15" fill="rgb(242,216,29)" fg:x="1166" fg:w="5"/><text x="18.7111%" y="95.50"></text></g><g><title>[alloc::collections::btree::remove::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv] (1 samples, 0.02%)</title><rect x="18.5244%" y="69" width="0.0158%" height="15" fill="rgb(230,116,27)" fg:x="1170" fg:w="1"/><text x="18.7744%" y="79.50"></text></g><g><title>[kernel::context::memory::AddrSpace::munmap_inner] (9 samples, 0.14%)</title><rect x="18.4136%" y="101" width="0.1425%" height="15" fill="rgb(228,99,48)" fg:x="1163" fg:w="9"/><text x="18.6636%" y="111.50"></text></g><g><title>[rmm::page::mapper::unmap_phys_inner] (1 samples, 0.02%)</title><rect x="18.5402%" y="85" width="0.0158%" height="15" fill="rgb(253,11,6)" fg:x="1171" fg:w="1"/><text x="18.7902%" y="95.50"></text></g><g><title>[rmm::page::mapper::unmap_phys_inner] (1 samples, 0.02%)</title><rect x="18.5402%" y="69" width="0.0158%" height="15" fill="rgb(247,143,39)" fg:x="1171" fg:w="1"/><text x="18.7902%" y="79.50"></text></g><g><title>[rmm::page::mapper::unmap_phys_inner] (1 samples, 0.02%)</title><rect x="18.5402%" y="53" width="0.0158%" height="15" fill="rgb(236,97,10)" fg:x="1171" fg:w="1"/><text x="18.7902%" y="63.50"></text></g><g><title>[rmm::page::mapper::unmap_phys_inner] (1 samples, 0.02%)</title><rect x="18.5402%" y="37" width="0.0158%" height="15" fill="rgb(233,208,19)" fg:x="1171" fg:w="1"/><text x="18.7902%" y="47.50"></text></g><g><title>[kernel::scheme::user::CaptureGuard&lt;_,_&gt;::release_inner] (48 samples, 0.76%)</title><rect x="18.3819%" y="133" width="0.7600%" height="15" fill="rgb(216,164,2)" fg:x="1161" fg:w="48"/><text x="18.6319%" y="143.50"></text></g><g><title>[kernel::context::memory::AddrSpaceWrapper::munmap] (48 samples, 0.76%)</title><rect x="18.3819%" y="117" width="0.7600%" height="15" fill="rgb(220,129,5)" fg:x="1161" fg:w="48"/><text x="18.6319%" y="127.50"></text></g><g><title>[kernel::context::memory::Flusher::flush] (37 samples, 0.59%)</title><rect x="18.5560%" y="101" width="0.5858%" height="15" fill="rgb(242,17,10)" fg:x="1172" fg:w="37"/><text x="18.8060%" y="111.50"></text></g><g><title>[memcpy] (1 samples, 0.02%)</title><rect x="19.1260%" y="85" width="0.0158%" height="15" fill="rgb(242,107,0)" fg:x="1208" fg:w="1"/><text x="19.3760%" y="95.50"></text></g><g><title>[kernel::event::trigger] (1 samples, 0.02%)</title><rect x="19.1419%" y="117" width="0.0158%" height="15" fill="rgb(251,28,31)" fg:x="1209" fg:w="1"/><text x="19.3919%" y="127.50"></text></g><g><title>[&lt;alloc::collections::btree::map::Range&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next] (1 samples, 0.02%)</title><rect x="19.2052%" y="101" width="0.0158%" height="15" fill="rgb(233,223,10)" fg:x="1213" fg:w="1"/><text x="19.4552%" y="111.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter] (231 samples, 3.66%)</title><rect x="22.1976%" y="85" width="3.6574%" height="15" fill="rgb(215,21,27)" fg:x="1402" fg:w="231"/><text x="22.4476%" y="95.50">[ker..</text></g><g><title>[kernel::context::switch::switch] (426 samples, 6.74%)</title><rect x="19.2210%" y="101" width="6.7448%" height="15" fill="rgb(232,23,21)" fg:x="1214" fg:w="426"/><text x="19.4710%" y="111.50">[kernel::..</text></g><g><title>[kernel::context::switch::switch_finish_hook] (7 samples, 0.11%)</title><rect x="25.8550%" y="85" width="0.1108%" height="15" fill="rgb(244,5,23)" fg:x="1633" fg:w="7"/><text x="26.1050%" y="95.50"></text></g><g><title>[kernel::event::trigger] (9 samples, 0.14%)</title><rect x="25.9658%" y="101" width="0.1425%" height="15" fill="rgb(226,81,46)" fg:x="1640" fg:w="9"/><text x="26.2158%" y="111.50"></text></g><g><title>[kernel::sync::wait_condition::WaitCondition::notify] (8 samples, 0.13%)</title><rect x="25.9816%" y="85" width="0.1267%" height="15" fill="rgb(247,70,30)" fg:x="1641" fg:w="8"/><text x="26.2316%" y="95.50"></text></g><g><title>[kernel::scheme::user::UserInner::call] (470 samples, 7.44%)</title><rect x="19.1419%" y="133" width="7.4414%" height="15" fill="rgb(212,68,19)" fg:x="1209" fg:w="470"/><text x="19.3919%" y="143.50">[kernel::s..</text></g><g><title>[kernel::scheme::user::UserInner::call_extended_inner] (469 samples, 7.43%)</title><rect x="19.1577%" y="117" width="7.4256%" height="15" fill="rgb(240,187,13)" fg:x="1210" fg:w="469"/><text x="19.4077%" y="127.50">[kernel::s..</text></g><g><title>[kernel::sync::wait_condition::WaitCondition::notify] (30 samples, 0.47%)</title><rect x="26.1083%" y="101" width="0.4750%" height="15" fill="rgb(223,113,26)" fg:x="1649" fg:w="30"/><text x="26.3583%" y="111.50"></text></g><g><title>[kernel::context::memory::Flusher::flush] (10 samples, 0.16%)</title><rect x="26.5833%" y="101" width="0.1583%" height="15" fill="rgb(206,192,2)" fg:x="1679" fg:w="10"/><text x="26.8333%" y="111.50"></text></g><g><title>[kernel::context::memory::Grant::borrow] (1 samples, 0.02%)</title><rect x="26.7416%" y="101" width="0.0158%" height="15" fill="rgb(241,108,4)" fg:x="1689" fg:w="1"/><text x="26.9916%" y="111.50"></text></g><g><title>[alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert] (1 samples, 0.02%)</title><rect x="26.7891%" y="85" width="0.0158%" height="15" fill="rgb(247,173,49)" fg:x="1692" fg:w="1"/><text x="27.0391%" y="95.50"></text></g><g><title>[kernel::context::memory::AddrSpace::mmap] (15 samples, 0.24%)</title><rect x="26.5833%" y="117" width="0.2375%" height="15" fill="rgb(224,114,35)" fg:x="1679" fg:w="15"/><text x="26.8333%" y="127.50"></text></g><g><title>[kernel::context::memory::UserGrants::insert] (4 samples, 0.06%)</title><rect x="26.7574%" y="101" width="0.0633%" height="15" fill="rgb(245,159,27)" fg:x="1690" fg:w="4"/><text x="27.0074%" y="111.50"></text></g><g><title>[alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove] (1 samples, 0.02%)</title><rect x="26.8049%" y="85" width="0.0158%" height="15" fill="rgb(245,172,44)" fg:x="1693" fg:w="1"/><text x="27.0549%" y="95.50"></text></g><g><title>[&lt;kernel::scheme::user::UserScheme as kernel::scheme::KernelScheme&gt;::kwrite] (545 samples, 8.63%)</title><rect x="18.2869%" y="149" width="8.6289%" height="15" fill="rgb(236,23,11)" fg:x="1155" fg:w="545"/><text x="18.5369%" y="159.50">[&lt;kernel::sc..</text></g><g><title>[kernel::scheme::user::UserInner::capture_inner] (21 samples, 0.33%)</title><rect x="26.5833%" y="133" width="0.3325%" height="15" fill="rgb(205,117,38)" fg:x="1679" fg:w="21"/><text x="26.8333%" y="143.50"></text></g><g><title>[memset] (6 samples, 0.09%)</title><rect x="26.8208%" y="117" width="0.0950%" height="15" fill="rgb(237,72,25)" fg:x="1694" fg:w="6"/><text x="27.0708%" y="127.50"></text></g><g><title>[kernel::arch::x86_64::arch_copy_to_user] (3 samples, 0.05%)</title><rect x="26.9158%" y="149" width="0.0475%" height="15" fill="rgb(244,70,9)" fg:x="1700" fg:w="3"/><text x="27.1658%" y="159.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter] (1 samples, 0.02%)</title><rect x="26.9633%" y="149" width="0.0158%" height="15" fill="rgb(217,125,39)" fg:x="1703" fg:w="1"/><text x="27.2133%" y="159.50"></text></g><g><title>[kernel::context::current] (5 samples, 0.08%)</title><rect x="26.9791%" y="149" width="0.0792%" height="15" fill="rgb(235,36,10)" fg:x="1704" fg:w="5"/><text x="27.2291%" y="159.50"></text></g><g><title>[kernel::context::switch::switch] (36 samples, 0.57%)</title><rect x="27.0583%" y="149" width="0.5700%" height="15" fill="rgb(251,123,47)" fg:x="1709" fg:w="36"/><text x="27.3083%" y="159.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter] (19 samples, 0.30%)</title><rect x="27.3274%" y="133" width="0.3008%" height="15" fill="rgb(221,13,13)" fg:x="1726" fg:w="19"/><text x="27.5774%" y="143.50"></text></g><g><title>[&lt;kernel::scheme::proc::ProcScheme&lt;_&gt; as kernel::scheme::KernelScheme&gt;::close] (6 samples, 0.09%)</title><rect x="27.6282%" y="117" width="0.0950%" height="15" fill="rgb(238,131,9)" fg:x="1745" fg:w="6"/><text x="27.8782%" y="127.50"></text></g><g><title>[alloc::sync::Arc&lt;T,A&gt;::drop_slow] (6 samples, 0.09%)</title><rect x="27.6282%" y="101" width="0.0950%" height="15" fill="rgb(211,50,8)" fg:x="1745" fg:w="6"/><text x="27.8782%" y="111.50"></text></g><g><title>[&lt;kernel::context::memory::AddrSpace as core::ops::drop::Drop&gt;::drop] (6 samples, 0.09%)</title><rect x="27.6282%" y="85" width="0.0950%" height="15" fill="rgb(245,182,24)" fg:x="1745" fg:w="6"/><text x="27.8782%" y="95.50"></text></g><g><title>[rmm::page::mapper::unmap_phys_inner] (6 samples, 0.09%)</title><rect x="27.6282%" y="69" width="0.0950%" height="15" fill="rgb(242,14,37)" fg:x="1745" fg:w="6"/><text x="27.8782%" y="79.50"></text></g><g><title>[rmm::page::mapper::unmap_phys_inner] (4 samples, 0.06%)</title><rect x="27.6599%" y="53" width="0.0633%" height="15" fill="rgb(246,228,12)" fg:x="1747" fg:w="4"/><text x="27.9099%" y="63.50"></text></g><g><title>[rmm::page::mapper::unmap_phys_inner] (2 samples, 0.03%)</title><rect x="27.6916%" y="37" width="0.0317%" height="15" fill="rgb(213,55,15)" fg:x="1749" fg:w="2"/><text x="27.9416%" y="47.50"></text></g><g><title>[kernel::syscall::fs::close] (12 samples, 0.19%)</title><rect x="27.6282%" y="149" width="0.1900%" height="15" fill="rgb(209,9,3)" fg:x="1745" fg:w="12"/><text x="27.8782%" y="159.50"></text></g><g><title>[kernel::context::file::FileDescription::try_close] (12 samples, 0.19%)</title><rect x="27.6282%" y="133" width="0.1900%" height="15" fill="rgb(230,59,30)" fg:x="1745" fg:w="12"/><text x="27.8782%" y="143.50"></text></g><g><title>[&lt;kernel::scheme::user::UserScheme as kernel::scheme::KernelScheme&gt;::close] (6 samples, 0.09%)</title><rect x="27.7232%" y="117" width="0.0950%" height="15" fill="rgb(209,121,21)" fg:x="1751" fg:w="6"/><text x="27.9732%" y="127.50"></text></g><g><title>[kernel::scheme::user::UserInner::call] (6 samples, 0.09%)</title><rect x="27.7232%" y="101" width="0.0950%" height="15" fill="rgb(220,109,13)" fg:x="1751" fg:w="6"/><text x="27.9732%" y="111.50"></text></g><g><title>[kernel::scheme::user::UserInner::call_extended_inner] (6 samples, 0.09%)</title><rect x="27.7232%" y="85" width="0.0950%" height="15" fill="rgb(232,18,1)" fg:x="1751" fg:w="6"/><text x="27.9732%" y="95.50"></text></g><g><title>[kernel::context::switch::switch] (6 samples, 0.09%)</title><rect x="27.7232%" y="69" width="0.0950%" height="15" fill="rgb(215,41,42)" fg:x="1751" fg:w="6"/><text x="27.9732%" y="79.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter] (4 samples, 0.06%)</title><rect x="27.7549%" y="53" width="0.0633%" height="15" fill="rgb(224,123,36)" fg:x="1753" fg:w="4"/><text x="28.0049%" y="63.50"></text></g><g><title>[kernel::syscall::fs::copy_path_to_buf] (2 samples, 0.03%)</title><rect x="27.8182%" y="149" width="0.0317%" height="15" fill="rgb(240,125,3)" fg:x="1757" fg:w="2"/><text x="28.0682%" y="159.50"></text></g><g><title>[memset] (2 samples, 0.03%)</title><rect x="27.8182%" y="133" width="0.0317%" height="15" fill="rgb(205,98,50)" fg:x="1757" fg:w="2"/><text x="28.0682%" y="143.50"></text></g><g><title>[kernel::context::memory::Grant::copy_mappings] (2 samples, 0.03%)</title><rect x="27.8499%" y="85" width="0.0317%" height="15" fill="rgb(205,185,37)" fg:x="1759" fg:w="2"/><text x="28.0999%" y="95.50"></text></g><g><title>[kernel::memory::allocate_frames] (1 samples, 0.02%)</title><rect x="27.8657%" y="69" width="0.0158%" height="15" fill="rgb(238,207,15)" fg:x="1760" fg:w="1"/><text x="28.1157%" y="79.50"></text></g><g><title>[memset] (1 samples, 0.02%)</title><rect x="27.8657%" y="53" width="0.0158%" height="15" fill="rgb(213,199,42)" fg:x="1760" fg:w="1"/><text x="28.1157%" y="63.50"></text></g><g><title>[kernel::context::memory::AddrSpaceWrapper::try_clone] (5 samples, 0.08%)</title><rect x="27.8499%" y="101" width="0.0792%" height="15" fill="rgb(235,201,11)" fg:x="1759" fg:w="5"/><text x="28.0999%" y="111.50"></text></g><g><title>[kernel::memory::get_page_info] (3 samples, 0.05%)</title><rect x="27.8816%" y="85" width="0.0475%" height="15" fill="rgb(207,46,11)" fg:x="1761" fg:w="3"/><text x="28.1316%" y="95.50"></text></g><g><title>[&lt;kernel::scheme::proc::ProcScheme&lt;_&gt; as kernel::scheme::KernelScheme&gt;::kdup] (6 samples, 0.09%)</title><rect x="27.8499%" y="117" width="0.0950%" height="15" fill="rgb(241,35,35)" fg:x="1759" fg:w="6"/><text x="28.0999%" y="127.50"></text></g><g><title>[kernel::scheme::proc::ProcScheme&lt;_&gt;::open_inner] (1 samples, 0.02%)</title><rect x="27.9291%" y="101" width="0.0158%" height="15" fill="rgb(243,32,47)" fg:x="1764" fg:w="1"/><text x="28.1791%" y="111.50"></text></g><g><title>[kernel::syscall::fs::dup] (7 samples, 0.11%)</title><rect x="27.8499%" y="149" width="0.1108%" height="15" fill="rgb(247,202,23)" fg:x="1759" fg:w="7"/><text x="28.0999%" y="159.50"></text></g><g><title>[kernel::syscall::fs::duplicate_file] (7 samples, 0.11%)</title><rect x="27.8499%" y="133" width="0.1108%" height="15" fill="rgb(219,102,11)" fg:x="1759" fg:w="7"/><text x="28.0999%" y="143.50"></text></g><g><title>[&lt;kernel::scheme::user::UserScheme as kernel::scheme::KernelScheme&gt;::kdup] (1 samples, 0.02%)</title><rect x="27.9449%" y="117" width="0.0158%" height="15" fill="rgb(243,110,44)" fg:x="1765" fg:w="1"/><text x="28.1949%" y="127.50"></text></g><g><title>[kernel::scheme::user::UserInner::call_extended_inner] (1 samples, 0.02%)</title><rect x="27.9449%" y="101" width="0.0158%" height="15" fill="rgb(222,74,54)" fg:x="1765" fg:w="1"/><text x="28.1949%" y="111.50"></text></g><g><title>[kernel::context::switch::switch] (1 samples, 0.02%)</title><rect x="27.9449%" y="85" width="0.0158%" height="15" fill="rgb(216,99,12)" fg:x="1765" fg:w="1"/><text x="28.1949%" y="95.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter] (1 samples, 0.02%)</title><rect x="27.9449%" y="69" width="0.0158%" height="15" fill="rgb(226,22,26)" fg:x="1765" fg:w="1"/><text x="28.1949%" y="79.50"></text></g><g><title>[kernel::context::memory::Flusher::flush] (2 samples, 0.03%)</title><rect x="27.9607%" y="101" width="0.0317%" height="15" fill="rgb(217,163,10)" fg:x="1766" fg:w="2"/><text x="28.2107%" y="111.50"></text></g><g><title>[kernel::memory::allocate_frames] (17 samples, 0.27%)</title><rect x="27.9924%" y="101" width="0.2692%" height="15" fill="rgb(213,25,53)" fg:x="1768" fg:w="17"/><text x="28.2424%" y="111.50"></text></g><g><title>[memset] (17 samples, 0.27%)</title><rect x="27.9924%" y="85" width="0.2692%" height="15" fill="rgb(252,105,26)" fg:x="1768" fg:w="17"/><text x="28.2424%" y="95.50"></text></g><g><title>[kernel::memory::get_page_info] (2 samples, 0.03%)</title><rect x="28.2616%" y="101" width="0.0317%" height="15" fill="rgb(220,39,43)" fg:x="1785" fg:w="2"/><text x="28.5116%" y="111.50"></text></g><g><title>[&lt;kernel::scheme::memory::MemoryScheme as kernel::scheme::KernelScheme&gt;::kfmap] (22 samples, 0.35%)</title><rect x="27.9607%" y="133" width="0.3483%" height="15" fill="rgb(229,68,48)" fg:x="1766" fg:w="22"/><text x="28.2107%" y="143.50"></text></g><g><title>[kernel::scheme::memory::MemoryScheme::fmap_anonymous] (22 samples, 0.35%)</title><rect x="27.9607%" y="117" width="0.3483%" height="15" fill="rgb(252,8,32)" fg:x="1766" fg:w="22"/><text x="28.2107%" y="127.50"></text></g><g><title>[rmm::page::mapper::PageMapper&lt;A,F&gt;::map_phys] (1 samples, 0.02%)</title><rect x="28.2932%" y="101" width="0.0158%" height="15" fill="rgb(223,20,43)" fg:x="1787" fg:w="1"/><text x="28.5432%" y="111.50"></text></g><g><title>[kernel::context::switch::switch] (2 samples, 0.03%)</title><rect x="28.3091%" y="85" width="0.0317%" height="15" fill="rgb(229,81,49)" fg:x="1788" fg:w="2"/><text x="28.5591%" y="95.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter] (1 samples, 0.02%)</title><rect x="28.3249%" y="69" width="0.0158%" height="15" fill="rgb(236,28,36)" fg:x="1789" fg:w="1"/><text x="28.5749%" y="79.50"></text></g><g><title>[&lt;kernel::scheme::user::UserScheme as kernel::scheme::KernelScheme&gt;::fsync] (4 samples, 0.06%)</title><rect x="28.3091%" y="133" width="0.0633%" height="15" fill="rgb(249,185,26)" fg:x="1788" fg:w="4"/><text x="28.5591%" y="143.50"></text></g><g><title>[kernel::scheme::user::UserInner::call] (4 samples, 0.06%)</title><rect x="28.3091%" y="117" width="0.0633%" height="15" fill="rgb(249,174,33)" fg:x="1788" fg:w="4"/><text x="28.5591%" y="127.50"></text></g><g><title>[kernel::scheme::user::UserInner::call_extended_inner] (4 samples, 0.06%)</title><rect x="28.3091%" y="101" width="0.0633%" height="15" fill="rgb(233,201,37)" fg:x="1788" fg:w="4"/><text x="28.5591%" y="111.50"></text></g><g><title>[kernel::sync::wait_condition::WaitCondition::notify] (2 samples, 0.03%)</title><rect x="28.3407%" y="85" width="0.0317%" height="15" fill="rgb(221,78,26)" fg:x="1790" fg:w="2"/><text x="28.5907%" y="95.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter] (21 samples, 0.33%)</title><rect x="29.0690%" y="69" width="0.3325%" height="15" fill="rgb(250,127,30)" fg:x="1836" fg:w="21"/><text x="29.3190%" y="79.50"></text></g><g><title>[kernel::context::switch::switch] (65 samples, 1.03%)</title><rect x="28.3882%" y="85" width="1.0291%" height="15" fill="rgb(230,49,44)" fg:x="1793" fg:w="65"/><text x="28.6382%" y="95.50"></text></g><g><title>[kernel::context::switch::switch_finish_hook] (1 samples, 0.02%)</title><rect x="29.4015%" y="69" width="0.0158%" height="15" fill="rgb(229,67,23)" fg:x="1857" fg:w="1"/><text x="29.6515%" y="79.50"></text></g><g><title>[kernel::syscall::fs::file_op_generic_ext] (97 samples, 1.54%)</title><rect x="27.9607%" y="149" width="1.5358%" height="15" fill="rgb(249,83,47)" fg:x="1766" fg:w="97"/><text x="28.2107%" y="159.50"></text></g><g><title>[&lt;kernel::scheme::user::UserScheme as kernel::scheme::KernelScheme&gt;::seek] (71 samples, 1.12%)</title><rect x="28.3724%" y="133" width="1.1241%" height="15" fill="rgb(215,43,3)" fg:x="1792" fg:w="71"/><text x="28.6224%" y="143.50"></text></g><g><title>[kernel::scheme::user::UserInner::call] (71 samples, 1.12%)</title><rect x="28.3724%" y="117" width="1.1241%" height="15" fill="rgb(238,154,13)" fg:x="1792" fg:w="71"/><text x="28.6224%" y="127.50"></text></g><g><title>[kernel::scheme::user::UserInner::call_extended_inner] (70 samples, 1.11%)</title><rect x="28.3882%" y="101" width="1.1083%" height="15" fill="rgb(219,56,2)" fg:x="1793" fg:w="70"/><text x="28.6382%" y="111.50"></text></g><g><title>[kernel::event::trigger] (5 samples, 0.08%)</title><rect x="29.4174%" y="85" width="0.0792%" height="15" fill="rgb(233,0,4)" fg:x="1858" fg:w="5"/><text x="29.6674%" y="95.50"></text></g><g><title>[kernel::sync::wait_condition::WaitCondition::notify] (5 samples, 0.08%)</title><rect x="29.4174%" y="69" width="0.0792%" height="15" fill="rgb(235,30,7)" fg:x="1858" fg:w="5"/><text x="29.6674%" y="79.50"></text></g><g><title>[kernel::context::memory::Flusher::flush] (1 samples, 0.02%)</title><rect x="29.5123%" y="101" width="0.0158%" height="15" fill="rgb(250,79,13)" fg:x="1864" fg:w="1"/><text x="29.7623%" y="111.50"></text></g><g><title>[kernel::context::memory::AddrSpace::munmap_inner] (3 samples, 0.05%)</title><rect x="29.4965%" y="117" width="0.0475%" height="15" fill="rgb(211,146,34)" fg:x="1863" fg:w="3"/><text x="29.7465%" y="127.50"></text></g><g><title>[rmm::page::mapper::unmap_phys_inner] (1 samples, 0.02%)</title><rect x="29.5282%" y="101" width="0.0158%" height="15" fill="rgb(228,22,38)" fg:x="1865" fg:w="1"/><text x="29.7782%" y="111.50"></text></g><g><title>[rmm::page::mapper::unmap_phys_inner] (1 samples, 0.02%)</title><rect x="29.5282%" y="85" width="0.0158%" height="15" fill="rgb(235,168,5)" fg:x="1865" fg:w="1"/><text x="29.7782%" y="95.50"></text></g><g><title>[rmm::page::mapper::unmap_phys_inner] (1 samples, 0.02%)</title><rect x="29.5282%" y="69" width="0.0158%" height="15" fill="rgb(221,155,16)" fg:x="1865" fg:w="1"/><text x="29.7782%" y="79.50"></text></g><g><title>[kernel::syscall::fs::funmap] (4 samples, 0.06%)</title><rect x="29.4965%" y="149" width="0.0633%" height="15" fill="rgb(215,215,53)" fg:x="1863" fg:w="4"/><text x="29.7465%" y="159.50"></text></g><g><title>[kernel::context::memory::AddrSpaceWrapper::munmap] (4 samples, 0.06%)</title><rect x="29.4965%" y="133" width="0.0633%" height="15" fill="rgb(223,4,10)" fg:x="1863" fg:w="4"/><text x="29.7465%" y="143.50"></text></g><g><title>[kernel::context::memory::Flusher::flush] (1 samples, 0.02%)</title><rect x="29.5440%" y="117" width="0.0158%" height="15" fill="rgb(234,103,6)" fg:x="1866" fg:w="1"/><text x="29.7940%" y="127.50"></text></g><g><title>[&lt;kernel::context::memory::AddrSpace as core::ops::drop::Drop&gt;::drop] (2 samples, 0.03%)</title><rect x="29.5598%" y="133" width="0.0317%" height="15" fill="rgb(227,97,0)" fg:x="1867" fg:w="2"/><text x="29.8098%" y="143.50"></text></g><g><title>[rmm::page::mapper::unmap_phys_inner] (2 samples, 0.03%)</title><rect x="29.5598%" y="117" width="0.0317%" height="15" fill="rgb(234,150,53)" fg:x="1867" fg:w="2"/><text x="29.8098%" y="127.50"></text></g><g><title>[rmm::page::mapper::unmap_phys_inner] (2 samples, 0.03%)</title><rect x="29.5598%" y="101" width="0.0317%" height="15" fill="rgb(228,201,54)" fg:x="1867" fg:w="2"/><text x="29.8098%" y="111.50"></text></g><g><title>[rmm::page::mapper::unmap_phys_inner] (1 samples, 0.02%)</title><rect x="29.5757%" y="85" width="0.0158%" height="15" fill="rgb(222,22,37)" fg:x="1868" fg:w="1"/><text x="29.8257%" y="95.50"></text></g><g><title>[kernel::syscall::process::exit] (3 samples, 0.05%)</title><rect x="29.5598%" y="149" width="0.0475%" height="15" fill="rgb(237,53,32)" fg:x="1867" fg:w="3"/><text x="29.8098%" y="159.50"></text></g><g><title>[kernel::context::switch::switch] (1 samples, 0.02%)</title><rect x="29.5915%" y="133" width="0.0158%" height="15" fill="rgb(233,25,53)" fg:x="1869" fg:w="1"/><text x="29.8415%" y="143.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter] (1 samples, 0.02%)</title><rect x="29.5915%" y="117" width="0.0158%" height="15" fill="rgb(210,40,34)" fg:x="1869" fg:w="1"/><text x="29.8415%" y="127.50"></text></g><g><title>[kernel::syscall::process::kill] (15 samples, 0.24%)</title><rect x="29.6073%" y="149" width="0.2375%" height="15" fill="rgb(241,220,44)" fg:x="1870" fg:w="15"/><text x="29.8573%" y="159.50"></text></g><g><title>[kernel::context::switch::switch] (15 samples, 0.24%)</title><rect x="29.6073%" y="133" width="0.2375%" height="15" fill="rgb(235,28,35)" fg:x="1870" fg:w="15"/><text x="29.8573%" y="143.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter] (8 samples, 0.13%)</title><rect x="29.7182%" y="117" width="0.1267%" height="15" fill="rgb(210,56,17)" fg:x="1877" fg:w="8"/><text x="29.9682%" y="127.50"></text></g><g><title>[kernel::syscall::process::waitpid] (2 samples, 0.03%)</title><rect x="29.8448%" y="149" width="0.0317%" height="15" fill="rgb(224,130,29)" fg:x="1885" fg:w="2"/><text x="30.0948%" y="159.50"></text></g><g><title>[kernel::sync::wait_condition::WaitCondition::wait] (2 samples, 0.03%)</title><rect x="29.8448%" y="133" width="0.0317%" height="15" fill="rgb(235,212,8)" fg:x="1885" fg:w="2"/><text x="30.0948%" y="143.50"></text></g><g><title>[kernel::context::switch::switch] (2 samples, 0.03%)</title><rect x="29.8448%" y="117" width="0.0317%" height="15" fill="rgb(223,33,50)" fg:x="1885" fg:w="2"/><text x="30.0948%" y="127.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter] (1 samples, 0.02%)</title><rect x="29.8607%" y="101" width="0.0158%" height="15" fill="rgb(219,149,13)" fg:x="1886" fg:w="1"/><text x="30.1107%" y="111.50"></text></g><g><title>[__inner_syscall_instruction] (1,791 samples, 28.36%)</title><rect x="1.8366%" y="181" width="28.3566%" height="15" fill="rgb(250,156,29)" fg:x="116" fg:w="1791"/><text x="2.0866%" y="191.50">[__inner_syscall_instruction]</text></g><g><title>[kernel::syscall::syscall] (1,791 samples, 28.36%)</title><rect x="1.8366%" y="165" width="28.3566%" height="15" fill="rgb(216,193,19)" fg:x="116" fg:w="1791"/><text x="2.0866%" y="175.50">[kernel::syscall::syscall]</text></g><g><title>[kernel::syscall::time::clock_gettime] (20 samples, 0.32%)</title><rect x="29.8765%" y="149" width="0.3167%" height="15" fill="rgb(216,135,14)" fg:x="1887" fg:w="20"/><text x="30.1265%" y="159.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter] (15 samples, 0.24%)</title><rect x="29.9557%" y="133" width="0.2375%" height="15" fill="rgb(241,47,5)" fg:x="1892" fg:w="15"/><text x="30.2057%" y="143.50"></text></g><g><title>[kernel::context::memory::Flusher::flush] (1 samples, 0.02%)</title><rect x="30.2565%" y="133" width="0.0158%" height="15" fill="rgb(233,42,35)" fg:x="1911" fg:w="1"/><text x="30.5065%" y="143.50"></text></g><g><title>[memcpy] (1 samples, 0.02%)</title><rect x="30.2565%" y="117" width="0.0158%" height="15" fill="rgb(231,13,6)" fg:x="1911" fg:w="1"/><text x="30.5065%" y="127.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::syscall::syscall_instruction] (1,801 samples, 28.51%)</title><rect x="1.7891%" y="197" width="28.5149%" height="15" fill="rgb(207,181,40)" fg:x="113" fg:w="1801"/><text x="2.0391%" y="207.50">[kernel::arch::x86_64::interrupt::syscall::sys..</text></g><g><title>[kernel::arch::x86_64::interrupt::exception::page] (7 samples, 0.11%)</title><rect x="30.1932%" y="181" width="0.1108%" height="15" fill="rgb(254,173,49)" fg:x="1907" fg:w="7"/><text x="30.4432%" y="191.50"></text></g><g><title>[kernel::arch::x86_64::interrupt::exception::page::inner] (3 samples, 0.05%)</title><rect x="30.2565%" y="165" width="0.0475%" height="15" fill="rgb(221,1,38)" fg:x="1911" fg:w="3"/><text x="30.5065%" y="175.50"></text></g><g><title>[kernel::context::memory::correct_inner] (3 samples, 0.05%)</title><rect x="30.2565%" y="149" width="0.0475%" height="15" fill="rgb(206,124,46)" fg:x="1911" fg:w="3"/><text x="30.5065%" y="159.50"></text></g><g><title>[kernel::memory::init_frame] (2 samples, 0.03%)</title><rect x="30.2723%" y="133" width="0.0317%" height="15" fill="rgb(249,21,11)" fg:x="1912" fg:w="2"/><text x="30.5223%" y="143.50"></text></g><g><title>[kernel::memory::allocate_frames] (2 samples, 0.03%)</title><rect x="30.2723%" y="117" width="0.0317%" height="15" fill="rgb(222,201,40)" fg:x="1912" fg:w="2"/><text x="30.5223%" y="127.50"></text></g><g><title>[memset] (2 samples, 0.03%)</title><rect x="30.2723%" y="101" width="0.0317%" height="15" fill="rgb(235,61,29)" fg:x="1912" fg:w="2"/><text x="30.5223%" y="111.50"></text></g><g><title>[kernel::arch::x86_shared::interrupt::ipi::pit::inner] (2 samples, 0.03%)</title><rect x="30.3040%" y="197" width="0.0317%" height="15" fill="rgb(219,207,3)" fg:x="1914" fg:w="2"/><text x="30.5540%" y="207.50"></text></g><g><title>[kernel::arch::x86_shared::interrupt::ipi::tlb::inner] (6 samples, 0.09%)</title><rect x="30.3357%" y="197" width="0.0950%" height="15" fill="rgb(222,56,46)" fg:x="1916" fg:w="6"/><text x="30.5857%" y="207.50"></text></g><g><title>[kernel::arch::x86_shared::interrupt::ipi::tlb] (4 samples, 0.06%)</title><rect x="30.4307%" y="197" width="0.0633%" height="15" fill="rgb(239,76,54)" fg:x="1922" fg:w="4"/><text x="30.6807%" y="207.50"></text></g><g><title>[kernel::arch::x86_shared::interrupt::ipi::wakeup::inner] (94 samples, 1.49%)</title><rect x="30.4940%" y="197" width="1.4883%" height="15" fill="rgb(231,124,27)" fg:x="1926" fg:w="94"/><text x="30.7440%" y="207.50"></text></g><g><title>[kernel::arch::x86_shared::interrupt::ipi::wakeup] (42 samples, 0.66%)</title><rect x="31.9823%" y="197" width="0.6650%" height="15" fill="rgb(249,195,6)" fg:x="2020" fg:w="42"/><text x="32.2323%" y="207.50"></text></g><g><title>[kernel::arch::x86_shared::interrupt::ipi::wakeup::inner] (7 samples, 0.11%)</title><rect x="32.5364%" y="181" width="0.1108%" height="15" fill="rgb(237,174,47)" fg:x="2055" fg:w="7"/><text x="32.7864%" y="191.50"></text></g><g><title>[kernel::arch::x86_shared::time::counter] (1,340 samples, 21.22%)</title><rect x="32.6472%" y="197" width="21.2160%" height="15" fill="rgb(206,201,31)" fg:x="2062" fg:w="1340"/><text x="32.8972%" y="207.50">[kernel::arch::x86_shared::time::..</text></g><g><title>[kernel::context::arch::switch_to_inner] (1 samples, 0.02%)</title><rect x="53.8632%" y="197" width="0.0158%" height="15" fill="rgb(231,57,52)" fg:x="3402" fg:w="1"/><text x="54.1132%" y="207.50"></text></g><g><title>[kernel::context::switch::switch] (2,902 samples, 45.95%)</title><rect x="53.8790%" y="197" width="45.9468%" height="15" fill="rgb(248,177,22)" fg:x="3403" fg:w="2902"/><text x="54.1290%" y="207.50">[kernel::context::switch::switch]</text></g><g><title>[kernel::context::switch::switch_finish_hook] (10 samples, 0.16%)</title><rect x="99.8258%" y="197" width="0.1583%" height="15" fill="rgb(215,211,37)" fg:x="6305" fg:w="10"/><text x="100.0758%" y="207.50"></text></g><g><title>all (6,316 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(241,128,51)" fg:x="0" fg:w="6316"/><text x="0.2500%" y="239.50"></text></g><g><title>kernel (6,316 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(227,165,31)" fg:x="0" fg:w="6316"/><text x="0.2500%" y="223.50">kernel</text></g><g><title>[kernel::run_userspace] (1 samples, 0.02%)</title><rect x="99.9842%" y="197" width="0.0158%" height="15" fill="rgb(228,167,24)" fg:x="6315" fg:w="1"/><text x="100.2342%" y="207.50"></text></g></svg></svg>
